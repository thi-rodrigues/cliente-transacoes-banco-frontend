{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, Optional, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter, __rest } from 'tslib';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  apm: false,\n  leadZero: false,\n  keepCharacterPositions: false,\n  triggerOnMaskChange: false,\n  inputTransformFn: value => value,\n  outputTransformFn: value => value,\n  maskFilled: new EventEmitter(),\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    U: {\n      pattern: new RegExp('[A-Z]')\n    },\n    L: {\n      pattern: new RegExp('[a-z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = [\"Hh:m0:s0\"\n/* HOURS_MINUTES_SECONDS */\n, \"Hh:m0\"\n/* HOURS_MINUTES */\n, \"m0:s0\"\n/* MINUTES_SECONDS */\n];\nconst withoutValidation = [\"percent\"\n/* PERCENT */\n, \"Hh\"\n/* HOURS_HOUR */\n, \"s0\"\n/* SECONDS */\n, \"m0\"\n/* MINUTES */\n, \"separator\"\n/* SEPARATOR */\n, \"d0/M0/0000\"\n/* DAYS_MONTHS_YEARS */\n, \"d0/M0\"\n/* DAYS_MONTHS */\n, \"d0\"\n/* DAYS */\n, \"M0\"\n/* MONTHS */\n];\n\nclass NgxMaskApplierService {\n  constructor(_config) {\n    this._config = _config;\n    this._shift = new Set();\n    this.plusOnePosition = false;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.showKeepCharacterExp = '';\n    this.shownMaskExpression = '';\n    this.deletedSpecialCharacter = false;\n\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n      var _a, _b, _c;\n\n      let x = [];\n      let decimalChar = '';\n\n      if (Array.isArray(decimalChars)) {\n        const regExp = new RegExp(decimalChars.map(v => '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v).join('|'));\n        x = str.split(regExp);\n        decimalChar = (_b = (_a = str.match(regExp)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : \"\"\n        /* EMPTY_STRING */\n        ;\n      } else {\n        x = str.split(decimalChars);\n        decimalChar = decimalChars;\n      }\n\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : \"\"\n      /* EMPTY_STRING */\n      ;\n      let res = (_c = x[0]) !== null && _c !== void 0 ? _c : \"\"\n      /* EMPTY_STRING */\n      ;\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, \"\"\n      /* EMPTY_STRING */\n      );\n\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === \"-\"\n        /* MINUS */\n        ) {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n\n      const rgx = /(\\d+)(\\d{3})/;\n\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n\n      return res + decimals.substring(0, precision + 1);\n    };\n\n    this.percentage = str => {\n      const sanitizedStr = str.replace(',', '.');\n      const value = Number(sanitizedStr);\n      return !isNaN(value) && value >= 0 && value <= 100;\n    };\n\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split(\".\"\n      /* DOT */\n      );\n\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n\n      return Infinity;\n    };\n\n    this.checkAndRemoveSuffix = inputValue => {\n      var _a, _b, _c, _d;\n\n      for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n        const substr = this.suffix.substring(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n\n        if (inputValue.includes(substr) && i !== ((_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length) - 1 && (i - 1 < 0 || !inputValue.includes(this.suffix.substring(i - 1, (_d = this.suffix) === null || _d === void 0 ? void 0 : _d.length)))) {\n          return inputValue.replace(substr, \"\"\n          /* EMPTY_STRING */\n          );\n        }\n      }\n\n      return inputValue;\n    };\n\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      var _a, _b;\n\n      if (precision < Infinity) {\n        // TODO need think about decimalMarker\n        if (Array.isArray(decimalMarker)) {\n          const marker = decimalMarker.find(dm => dm !== this.thousandSeparator); // eslint-disable-next-line no-param-reassign\n\n          decimalMarker = marker ? marker : decimalMarker[0];\n        }\n\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n        const precisionMatchLength = (_b = precisionMatch && ((_a = precisionMatch[0]) === null || _a === void 0 ? void 0 : _a.length)) !== null && _b !== void 0 ? _b : 0;\n\n        if (precisionMatchLength - 1 > precision) {\n          const diff = precisionMatchLength - 1 - precision; // eslint-disable-next-line no-param-reassign\n\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n\n        if (precision === 0 && this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n\n      return inputValue;\n    };\n\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.hiddenInput = this._config.hiddenInput;\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.specialCharacters = this._config.specialCharacters;\n    this.patterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n    this.leadZero = this._config.leadZero;\n    this.apm = this._config.apm;\n    this.inputTransformFn = this._config.inputTransformFn;\n    this.outputTransformFn = this._config.outputTransformFn;\n    this.keepCharacterPositions = this._config.keepCharacterPositions;\n  }\n\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n\n    if (!maskExpression || typeof inputValue !== 'string') {\n      return \"\"\n      /* EMPTY_STRING */\n      ;\n    }\n\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n\n    if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n\n    if (inputValue === '(' && this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = '';\n    }\n\n    const inputArray = inputValue.toString().split(\"\"\n    /* EMPTY_STRING */\n    );\n\n    if (this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\"\n    /* MINUS */\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      result += inputValue.slice(cursor, cursor + 1);\n    }\n\n    if (maskExpression === \"IP\"\n    /* IP */\n    ) {\n      const valuesIP = inputValue.split(\".\"\n      /* DOT */\n      );\n      this.ipError = this._validIP(valuesIP); // eslint-disable-next-line no-param-reassign\n\n      maskExpression = '099.099.099.099';\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputValue.length; i++) {\n      if ((_a = inputValue[i]) === null || _a === void 0 ? void 0 : _a.match('\\\\d')) {\n        arr.push((_b = inputValue[i]) !== null && _b !== void 0 ? _b : \"\"\n        /* EMPTY_STRING */\n        );\n      }\n    }\n\n    if (maskExpression === \"CPF_CNPJ\"\n    /* CPF_CNPJ */\n    ) {\n      this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n\n      if (arr.length > 11) {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '000.000.000-00';\n      }\n    }\n\n    if (maskExpression.startsWith(\"percent\"\n    /* PERCENT */\n    )) {\n      if (inputValue.match('[a-z]|[A-Z]') || // eslint-disable-next-line no-useless-escape\n      inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n\n      const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\"\n      /* DOT */\n      ;\n\n      if (inputValue.indexOf(decimalMarker) > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf(decimalMarker)))) {\n        let base = inputValue.substring(0, inputValue.indexOf(decimalMarker) - 1);\n\n        if (this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\"\n        /* MINUS */\n        && !backspaced) {\n          base = inputValue.substring(0, inputValue.indexOf(decimalMarker));\n        } // eslint-disable-next-line no-param-reassign\n\n\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf(decimalMarker), inputValue.length)}`;\n      }\n\n      let value = '';\n      this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\"\n      /* MINUS */\n      ? value = inputValue.slice(cursor + 1, cursor + inputValue.length) : value = inputValue;\n\n      if (this.percentage(value)) {\n        result = this._splitPercentZero(inputValue);\n      } else {\n        result = this._splitPercentZero(inputValue.substring(0, inputValue.length - 1));\n      }\n    } else if (maskExpression.startsWith(\"separator\"\n    /* SEPARATOR */\n    )) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n      }\n\n      const precision = this.getPrecision(maskExpression);\n      const decimalMarker = Array.isArray(this.decimalMarker) ? \".\"\n      /* DOT */\n      : this.decimalMarker;\n\n      if (precision === 0) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.allowNegativeNumbers ? inputValue.length > 2 && inputValue[0] === \"-\"\n        /* MINUS */\n        && inputValue[1] === \"0\"\n        /* NUMBER_ZERO */\n        && inputValue[2] !== this.thousandSeparator && inputValue[2] !== \",\"\n        /* COMMA */\n        && inputValue[2] !== \".\"\n        /* DOT */\n        ? '-' + inputValue.slice(2, inputValue.length) : inputValue[0] === \"0\"\n        /* NUMBER_ZERO */\n        && inputValue.length > 1 && inputValue[1] !== this.thousandSeparator && inputValue[1] !== \",\"\n        /* COMMA */\n        && inputValue[1] !== \".\"\n        /* DOT */\n        ? inputValue.slice(1, inputValue.length) : inputValue : inputValue.length > 1 && inputValue[0] === \"0\"\n        /* NUMBER_ZERO */\n        && inputValue[1] !== this.thousandSeparator && inputValue[1] !== \",\"\n        /* COMMA */\n        && inputValue[1] !== \".\"\n        /* DOT */\n        ? inputValue.slice(1, inputValue.length) : inputValue;\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        if (inputValue[0] === decimalMarker && inputValue.length > 1) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = \"0\"\n          /* NUMBER_ZERO */\n          + inputValue.slice(0, inputValue.length + 1);\n          this.plusOnePosition = true;\n        }\n\n        if (inputValue[0] === \"0\"\n        /* NUMBER_ZERO */\n        && inputValue[1] !== decimalMarker && inputValue[1] !== this.thousandSeparator) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.length > 1 ? inputValue.slice(0, 1) + decimalMarker + inputValue.slice(1, inputValue.length + 1) : inputValue;\n          this.plusOnePosition = true;\n        }\n\n        if (this.allowNegativeNumbers && inputValue[0] === \"-\"\n        /* MINUS */\n        && (inputValue[1] === decimalMarker || inputValue[1] === \"0\"\n        /* NUMBER_ZERO */\n        )) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue[1] === decimalMarker && inputValue.length > 2 ? inputValue.slice(0, 1) + \"0\"\n          /* NUMBER_ZERO */\n          + inputValue.slice(1, inputValue.length) : inputValue[1] === \"0\"\n          /* NUMBER_ZERO */\n          && inputValue.length > 2 && inputValue[2] !== decimalMarker ? inputValue.slice(0, 2) + decimalMarker + inputValue.slice(2, inputValue.length) : inputValue;\n          this.plusOnePosition = true;\n        }\n      }\n\n      if (backspaced) {\n        if (inputValue[0] === \"0\"\n        /* NUMBER_ZERO */\n        && inputValue[1] === this.decimalMarker && (inputValue[position] === \"0\"\n        /* NUMBER_ZERO */\n        || inputValue[position] === this.decimalMarker)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.slice(2, inputValue.length);\n        }\n\n        if (inputValue[0] === \"-\"\n        /* MINUS */\n        && inputValue[1] === \"0\"\n        /* NUMBER_ZERO */\n        && inputValue[2] === this.decimalMarker && (inputValue[position] === \"0\"\n        /* NUMBER_ZERO */\n        || inputValue[position] === this.decimalMarker)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = \"-\"\n          /* MINUS */\n          + inputValue.slice(3, inputValue.length);\n        } // eslint-disable-next-line no-param-reassign\n\n\n        inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator) ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      } // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n\n      const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n\n      let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, ''); //.replace(decimalMarkerEscaped, '');\n\n      if (Array.isArray(this.decimalMarker)) {\n        for (const marker of this.decimalMarker) {\n          invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), \"\"\n          /* EMPTY_STRING */\n          );\n        }\n      } else {\n        invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n      }\n\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n\n      if (inputValue.match(invalidCharRegexp)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(\",\"\n      /* COMMA */\n      ) - inputValue.indexOf(\",\"\n      /* COMMA */\n      );\n      const shiftStep = result.length - inputValue.length;\n\n      if (shiftStep > 0 && result[position] !== this.thousandSeparator) {\n        backspaceShift = true;\n        let _shift = 0;\n\n        do {\n          this._shift.add(position + _shift);\n\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (result[position - 1] === this.decimalMarker || shiftStep === -4 || shiftStep === -3 || result[position] === \",\"\n      /* COMMA */\n      ) {\n        this._shift.clear();\n\n        this._shift.add(position - 1);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(\",\"\n      /* COMMA */\n      ) >= position && position > 3) || !(result.indexOf(\".\"\n      /* DOT */\n      ) >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n\n        backspaceShift = true;\n        shift = shiftStep; // eslint-disable-next-line no-param-reassign\n\n        position += shiftStep;\n\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for ( // eslint-disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = (_c = inputArray[i]) !== null && _c !== void 0 ? _c : \"\"\n      /* EMPTY_STRING */\n      ) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n\n        const symbolStarInPattern = (\"*\"\n        /* SYMBOL_STAR */\n        in this.patterns);\n\n        if (this._checkSymbolMask(inputSymbol, (_d = maskExpression[cursor]) !== null && _d !== void 0 ? _d : \"\"\n        /* EMPTY_STRING */\n        ) && maskExpression[cursor + 1] === \"?\"\n        /* SYMBOL_QUESTION */\n        ) {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === \"*\"\n        /* SYMBOL_STAR */\n        && multi && this._checkSymbolMask(inputSymbol, (_e = maskExpression[cursor + 2]) !== null && _e !== void 0 ? _e : \"\"\n        /* EMPTY_STRING */\n        )) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, (_f = maskExpression[cursor]) !== null && _f !== void 0 ? _f : \"\"\n        /* EMPTY_STRING */\n        ) && maskExpression[cursor + 1] === \"*\"\n        /* SYMBOL_STAR */\n        && !symbolStarInPattern) {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === \"?\"\n        /* SYMBOL_QUESTION */\n        && this._checkSymbolMask(inputSymbol, (_g = maskExpression[cursor + 2]) !== null && _g !== void 0 ? _g : \"\"\n        /* EMPTY_STRING */\n        )) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, (_h = maskExpression[cursor]) !== null && _h !== void 0 ? _h : \"\"\n        /* EMPTY_STRING */\n        )) {\n          if (maskExpression[cursor] === \"H\"\n          /* HOURS */\n          ) {\n            if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === \"h\"\n          /* HOUR */\n          ) {\n            if (this.apm ? result.length === 1 && Number(result) > 1 || result === '1' && Number(inputSymbol) > 2 || inputValue.slice(cursor - 1, cursor).length === 1 && Number(inputValue.slice(cursor - 1, cursor)) > 2 || inputValue.slice(cursor - 1, cursor) === '1' && Number(inputSymbol) > 2 : result === '2' && Number(inputSymbol) > 3 || (result.slice(cursor - 2, cursor) === '2' || result.slice(cursor - 3, cursor) === '2' || result.slice(cursor - 4, cursor) === '2' || result.slice(cursor - 1, cursor) === '2') && Number(inputSymbol) > 3 && cursor > 10) {\n              // eslint-disable-next-line no-param-reassign\n              position = position + 1;\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === \"m\"\n          /* MINUTE */\n          || maskExpression[cursor] === \"s\"\n          /* SECOND */\n          ) {\n            if (Number(inputSymbol) > 5) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          const daysCount = 31;\n          const inputValueCursor = inputValue[cursor];\n          const inputValueCursorPlusOne = inputValue[cursor + 1];\n          const inputValueCursorPlusTwo = inputValue[cursor + 2];\n          const inputValueCursorMinusOne = inputValue[cursor - 1];\n          const inputValueCursorMinusTwo = inputValue[cursor - 2];\n          const inputValueCursorMinusThree = inputValue[cursor - 3];\n          const inputValueSliceMinusThreeMinusOne = inputValue.slice(cursor - 3, cursor - 1);\n          const inputValueSliceMinusOnePlusOne = inputValue.slice(cursor - 1, cursor + 1);\n          const inputValueSliceCursorPlusTwo = inputValue.slice(cursor, cursor + 2);\n          const inputValueSliceMinusTwoCursor = inputValue.slice(cursor - 2, cursor);\n\n          if (maskExpression[cursor] === \"d\"\n          /* DAY */\n          ) {\n            const maskStartWithMonth = maskExpression.slice(0, 2) === \"M0\"\n            /* MONTHS */\n            ;\n            const startWithMonthInput = maskExpression.slice(0, 2) === \"M0\"\n            /* MONTHS */\n            && this.specialCharacters.includes(inputValueCursorMinusTwo);\n\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || !maskStartWithMonth && (Number(inputValueSliceCursorPlusTwo) > daysCount || Number(inputValueSliceMinusOnePlusOne) > daysCount || this.specialCharacters.includes(inputValueCursorPlusOne)) || (startWithMonthInput ? Number(inputValueSliceMinusOnePlusOne) > daysCount || !this.specialCharacters.includes(inputValueCursor) && this.specialCharacters.includes(inputValueCursorPlusTwo) || this.specialCharacters.includes(inputValueCursor) : Number(inputValueSliceCursorPlusTwo) > daysCount || this.specialCharacters.includes(inputValueCursorPlusOne))) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === \"M\"\n          /* MONTH */\n          ) {\n            const monthsCount = 12; // mask without day\n\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValueSliceCursorPlusTwo) > monthsCount || this.specialCharacters.includes(inputValueCursorPlusOne)); // day<10 && month<12 for input\n\n            const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\n            const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) && (this.specialCharacters.includes(inputValueCursorMinusTwo) && Number(inputValueSliceMinusOnePlusOne) > monthsCount && !this.specialCharacters.includes(inputValueCursor) || this.specialCharacters.includes(inputValueCursor) || this.specialCharacters.includes(inputValueCursorMinusThree) && Number(inputValueSliceMinusTwoCursor) > monthsCount && !this.specialCharacters.includes(inputValueCursorMinusOne) || this.specialCharacters.includes(inputValueCursorMinusOne)); //  month<12 && day<10 for input\n\n            const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && this.specialCharacters.includes(inputValueCursorMinusOne) && (Number(inputValueSliceCursorPlusTwo) > monthsCount || this.specialCharacters.includes(inputValueCursorPlusOne)); // cursor === 5 && without days\n\n            const day2monthInputDot = Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5 || this.specialCharacters.includes(inputValueCursorPlusOne) && cursor === 5; // // day<10 && month<12 for paste whole data\n\n            const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) && Number(inputValueSliceMinusTwoCursor) > monthsCount; // 10<day<31 && month<12 for paste whole data\n\n            const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && !this.specialCharacters.includes(inputValueCursorMinusOne) && Number(inputValueSliceMinusOnePlusOne) > monthsCount;\n\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthPaste || day1monthPaste || day2monthInput || day2monthInputDot && !this.leadZeroDateTime) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          result += inputSymbol;\n          cursor++;\n        } else if (inputSymbol === \" \"\n        /* WHITE_SPACE */\n        && maskExpression[cursor] === \" \"\n        /* WHITE_SPACE */\n        || inputSymbol === \"/\"\n        /* SLASH */\n        && maskExpression[cursor] === \"/\"\n        /* SLASH */\n        ) {\n          result += inputSymbol;\n          cursor++;\n        } else if (this.specialCharacters.indexOf((_j = maskExpression[cursor]) !== null && _j !== void 0 ? _j : \"\"\n        /* EMPTY_STRING */\n        ) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n\n          i--;\n        } else if (maskExpression[cursor] === \"9\"\n        /* NUMBER_NINE */\n        && this.showMaskTyped) {\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n        } else if (this.patterns[(_k = maskExpression[cursor]) !== null && _k !== void 0 ? _k : \"\"\n        /* EMPTY_STRING */\n        ] && ((_m = this.patterns[(_l = maskExpression[cursor]) !== null && _l !== void 0 ? _l : \"\"\n        /* EMPTY_STRING */\n        ]) === null || _m === void 0 ? void 0 : _m.optional)) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00' && !maskExpression.match(/^9+\\.0+$/) && !((_p = this.patterns[(_o = maskExpression[cursor]) !== null && _o !== void 0 ? _o : \"\"\n          /* EMPTY_STRING */\n          ]) === null || _p === void 0 ? void 0 : _p.optional)) {\n            result += inputArray[cursor];\n          }\n\n          if (maskExpression.includes(\"9\"\n          /* NUMBER_NINE */\n          + \"*\"\n          /* SYMBOL_STAR */\n          ) && maskExpression.includes(\"0\"\n          /* NUMBER_ZERO */\n          + \"*\"\n          /* SYMBOL_STAR */\n          )) {\n            cursor++;\n          }\n\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === \"*\"\n        /* SYMBOL_STAR */\n        && this._findSpecialChar((_q = this.maskExpression[cursor + 2]) !== null && _q !== void 0 ? _q : \"\"\n        /* EMPTY_STRING */\n        ) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === \"?\"\n        /* SYMBOL_QUESTION */\n        && this._findSpecialChar((_r = this.maskExpression[cursor + 2]) !== null && _r !== void 0 ? _r : \"\"\n        /* EMPTY_STRING */\n        ) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.specialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter && this.placeHolderCharacter.length === 1) {\n          stepBack = true;\n        }\n      }\n    }\n\n    if (result.length + 1 === maskExpression.length && this.specialCharacters.indexOf((_s = maskExpression[maskExpression.length - 1]) !== null && _s !== void 0 ? _s : \"\"\n    /* EMPTY_STRING */\n    ) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let newPosition = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    let actualShift = justPasted && !maskExpression.startsWith(\"separator\"\n    /* SEPARATOR */\n    ) ? cursor : this._shift.has(position) ? shift : 0;\n\n    if (stepBack) {\n      actualShift--;\n    }\n\n    cb(actualShift, backspaceShift);\n\n    if (shift < 0) {\n      this._shift.clear();\n    }\n\n    let onlySpecial = false;\n\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.specialCharacters.includes(char));\n    }\n\n    let res = `${this.prefix}${onlySpecial ? \"\"\n    /* EMPTY_STRING */\n    : result}${this.showMaskTyped ? '' : this.suffix}`;\n\n    if (result.length === 0) {\n      res = !this.dropSpecialCharacters ? `${this.prefix}${result}` : `${result}`;\n    }\n\n    if (result.includes(\"-\"\n    /* MINUS */\n    ) && this.prefix && this.allowNegativeNumbers) {\n      if (backspaced && result === \"-\"\n      /* MINUS */\n      ) {\n        return '';\n      }\n\n      res = `${\"-\"\n      /* MINUS */\n      }${this.prefix}${result.split(\"-\"\n      /* MINUS */\n      ).join(\"\"\n      /* EMPTY_STRING */\n      )}${this.suffix}`;\n    }\n\n    return res;\n  }\n\n  _findDropSpecialChar(inputSymbol) {\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      return this.dropSpecialCharacters.find(val => val === inputSymbol);\n    }\n\n    return this._findSpecialChar(inputSymbol);\n  }\n\n  _findSpecialChar(inputSymbol) {\n    return this.specialCharacters.find(val => val === inputSymbol);\n  }\n\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    var _a, _b, _c;\n\n    this.patterns = this.customPattern ? this.customPattern : this.patterns;\n    return (_c = ((_a = this.patterns[maskSymbol]) === null || _a === void 0 ? void 0 : _a.pattern) && ((_b = this.patterns[maskSymbol]) === null || _b === void 0 ? void 0 : _b.pattern.test(inputSymbol))) !== null && _c !== void 0 ? _c : false;\n  }\n\n  _stripToDecimal(str) {\n    return str.split(\"\"\n    /* EMPTY_STRING */\n    ).filter((i, idx) => {\n      const isDecimalMarker = typeof this.decimalMarker === 'string' ? i === this.decimalMarker : // TODO (inepipenko) use utility type\n      this.decimalMarker.includes(i);\n      return i.match('^-?\\\\d') || i === this.thousandSeparator || isDecimalMarker || i === \"-\"\n      /* MINUS */\n      && idx === 0 && this.allowNegativeNumbers;\n    }).join(\"\"\n    /* EMPTY_STRING */\n    );\n  }\n\n  _charToRegExpExpression(char) {\n    // if (Array.isArray(char)) {\n    // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n    // }\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n    }\n\n    return char;\n  }\n\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n\n  _compareOrIncludes(value, comparedValue, excludedValue) {\n    return Array.isArray(comparedValue) ? comparedValue.filter(v => v !== excludedValue).includes(value) : value === comparedValue;\n  }\n\n  _validIP(valuesIP) {\n    return !(valuesIP.length === 4 && !valuesIP.some((value, index) => {\n      if (valuesIP.length !== index + 1) {\n        return value === \"\"\n        /* EMPTY_STRING */\n        || Number(value) > 255;\n      }\n\n      return value === \"\"\n      /* EMPTY_STRING */\n      || Number(value.substring(0, 3)) > 255;\n    }));\n  }\n\n  _splitPercentZero(value) {\n    const decimalIndex = typeof this.decimalMarker === 'string' ? value.indexOf(this.decimalMarker) : value.indexOf(\".\"\n    /* DOT */\n    );\n\n    if (decimalIndex === -1) {\n      const parsedValue = parseInt(value, 10);\n      return isNaN(parsedValue) ? \"\"\n      /* EMPTY_STRING */\n      : parsedValue.toString();\n    } else {\n      const integerPart = parseInt(value.substring(0, decimalIndex), 10);\n      const decimalPart = value.substring(decimalIndex + 1);\n      const integerString = isNaN(integerPart) ? '' : integerPart.toString();\n      const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\"\n      /* DOT */\n      ;\n      return integerString === \"\"\n      /* EMPTY_STRING */\n      ? \"\"\n      /* EMPTY_STRING */\n      : integerString + decimal + decimalPart;\n    }\n  }\n\n}\n\nNgxMaskApplierService.ɵfac = function NgxMaskApplierService_Factory(t) {\n  return new (t || NgxMaskApplierService)(i0.ɵɵinject(NGX_MASK_CONFIG));\n};\n\nNgxMaskApplierService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaskApplierService,\n  factory: NgxMaskApplierService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskApplierService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_MASK_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nclass NgxMaskService extends NgxMaskApplierService {\n  constructor(document, _config, _elementRef, _renderer) {\n    super(_config);\n    this.document = document;\n    this._config = _config;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this.isNumberValue = false;\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n\n    this.writingValue = false;\n    this.maskChanged = false;\n    this._maskExpressionArray = [];\n    this.triggerOnMaskChange = false;\n    this._emitValue = false;\n    this._previousValue = '';\n    this._currentValue = ''; // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n\n    this.onChange = _ => {};\n  } // eslint-disable-next-line complexity\n\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    var _a, _b;\n\n    if (!maskExpression) {\n      return inputValue !== this.actualValue ? this.actualValue : inputValue;\n    }\n\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : \"\"\n    /* EMPTY_STRING */\n    ;\n\n    if (this.maskExpression === \"IP\"\n    /* IP */\n    && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || \"#\"\n      /* HASH */\n      );\n    }\n\n    if (this.maskExpression === \"CPF_CNPJ\"\n    /* CPF_CNPJ */\n    && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || \"#\"\n      /* HASH */\n      );\n    }\n\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown + this.suffix;\n    }\n\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? (_a = inputValue[this.selStart]) !== null && _a !== void 0 ? _a : \"\"\n    /* EMPTY_STRING */\n    : \"\"\n    /* EMPTY_STRING */\n    ;\n    let newInputValue = '';\n\n    if (this.hiddenInput !== undefined && !this.writingValue) {\n      let actualResult = inputValue && inputValue.length === 1 ? inputValue.split(\"\"\n      /* EMPTY_STRING */\n      ) : this.actualValue.split(\"\"\n      /* EMPTY_STRING */\n      ); // eslint-disable  @typescript-eslint/no-unused-expressions\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n      if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\n        this.selStart = Number(this.selStart);\n        this.selEnd = Number(this.selEnd);\n      } else {\n        inputValue !== \"\"\n        /* EMPTY_STRING */\n        && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? backspaced ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(inputValue.length - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n      }\n\n      if (this.showMaskTyped) {\n        if (!this.hiddenInput) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = this.removeMask(inputValue);\n        }\n      } // eslint-enable  @typescript-eslint/no-unused-expressions\n\n\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join(\"\"\n      /* EMPTY_STRING */\n      )) : inputValue;\n    }\n\n    if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\n      newInputValue = inputValue;\n    }\n\n    if (backspaced && this.specialCharacters.indexOf((_b = this.maskExpression[position]) !== null && _b !== void 0 ? _b : \"\"\n    /* EMPTY_STRING */\n    ) !== -1 && this.showMaskTyped) {\n      newInputValue = this._currentValue;\n    }\n\n    if (this.deletedSpecialCharacter && position) {\n      if (this.specialCharacters.includes(this.actualValue.slice(position, position + 1))) {\n        // eslint-disable-next-line no-param-reassign\n        position = position + 1;\n      } else if (maskExpression.slice(position - 1, position + 1) !== \"M0\"\n      /* MONTHS */\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        position = position - 2;\n      } // eslint-disable-next-line no-param-reassign\n\n\n      this.deletedSpecialCharacter = false;\n    }\n\n    if (this.showMaskTyped && this.placeHolderCharacter.length === 1 && !this.leadZeroDateTime) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.removeMask(inputValue);\n    }\n\n    if (this.maskChanged) {\n      newInputValue = inputValue;\n    } else {\n      newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    }\n\n    if (this.showMaskTyped && this.keepCharacterPositions && this.actualValue && !justPasted) {\n      const value = this.dropSpecialCharacters ? this.removeMask(this.actualValue) : this.actualValue;\n      this.formControlResult(value);\n      return this.actualValue ? this.actualValue : this.prefix + this.maskIsShown + this.suffix;\n    }\n\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result); // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\n    if (this.thousandSeparator === \".\"\n    /* DOT */\n    && this.decimalMarker === \".\"\n    /* DOT */\n    ) {\n      this.decimalMarker = \",\"\n      /* COMMA */\n      ;\n    } // b) remove decimal marker from list of special characters to mask\n\n\n    if (this.maskExpression.startsWith(\"separator\"\n    /* SEPARATOR */\n    ) && this.dropSpecialCharacters === true) {\n      this.specialCharacters = this.specialCharacters.filter(item => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n      );\n    }\n\n    if (result || result === '') {\n      this._previousValue = this._currentValue;\n      this._currentValue = result;\n      this._emitValue = this._previousValue !== this._currentValue || this.maskChanged || this._previousValue === this._currentValue && justPasted;\n    }\n\n    this._emitValue ? this.formControlResult(result) : '';\n\n    if (!this.showMaskTyped || this.showMaskTyped && this.hiddenInput) {\n      if (this.hiddenInput) {\n        if (backspaced) {\n          return this.hideInput(result, this.maskExpression);\n        }\n\n        return this.hideInput(result, this.maskExpression) + this.maskIsShown.slice(result.length);\n      }\n\n      return result;\n    }\n\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown + this.suffix;\n\n    if (this.maskExpression.includes(\"H\"\n    /* HOURS */\n    )) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === \"IP\"\n    /* IP */\n    || this.maskExpression === \"CPF_CNPJ\"\n    /* CPF_CNPJ */\n    ) {\n      return result + prefNmask;\n    }\n\n    return result + prefNmask.slice(resLen);\n  } // get the number of characters that were shifted\n\n\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n\n    return countSkipedSymbol;\n  }\n\n  applyValueChanges(position, justPasted, backspaced, // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    var _a;\n\n    const formElement = (_a = this._elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement;\n\n    if (!formElement) {\n      return;\n    }\n\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n\n    if (formElement === this._getActiveElement()) {\n      return;\n    }\n\n    this.clearIfNotMatchFn();\n  }\n\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split(\"\"\n    /* EMPTY_STRING */\n    ).map((curr, index) => {\n      var _a, _b, _c, _d, _e;\n\n      if (this.patterns && this.patterns[(_a = maskExpression[index]) !== null && _a !== void 0 ? _a : \"\"\n      /* EMPTY_STRING */\n      ] && ((_c = this.patterns[(_b = maskExpression[index]) !== null && _b !== void 0 ? _b : \"\"\n      /* EMPTY_STRING */\n      ]) === null || _c === void 0 ? void 0 : _c.symbol)) {\n        return (_e = this.patterns[(_d = maskExpression[index]) !== null && _d !== void 0 ? _d : \"\"\n        /* EMPTY_STRING */\n        ]) === null || _e === void 0 ? void 0 : _e.symbol;\n      }\n\n      return curr;\n    }).join(\"\"\n    /* EMPTY_STRING */\n    );\n  } // this function is not necessary, it checks result against maskExpression\n\n\n  getActualValue(res) {\n    const compare = res.split(\"\"\n    /* EMPTY_STRING */\n    ).filter((symbol, i) => {\n      var _a;\n\n      const maskChar = (_a = this.maskExpression[i]) !== null && _a !== void 0 ? _a : \"\"\n      /* EMPTY_STRING */\n      ;\n      return this._checkSymbolMask(symbol, maskChar) || this.specialCharacters.includes(maskChar) && symbol === maskChar;\n    });\n\n    if (compare.join(\"\"\n    /* EMPTY_STRING */\n    ) === res) {\n      return compare.join(\"\"\n      /* EMPTY_STRING */\n      );\n    }\n\n    return res;\n  }\n\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split(\"\"\n    /* EMPTY_STRING */\n    ).map((currSymbol, index) => {\n      var _a;\n\n      if (this.specialCharacters.includes((_a = inputValue[index + 1]) !== null && _a !== void 0 ? _a : \"\"\n      /* EMPTY_STRING */\n      ) && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = \"\"\n        /* EMPTY_STRING */\n        ;\n        return replaceSymbol;\n      }\n\n      return currSymbol;\n    }) || [];\n    return newInputValue.join(\"\"\n    /* EMPTY_STRING */\n    );\n  }\n  /**\n   * Convert number value to string\n   * 3.1415 -> '3.1415'\n   * 1e-7 -> '0.0000001'\n   */\n\n\n  numberToString(value) {\n    if (!value && value !== 0 || this.maskExpression.startsWith(\"separator\"\n    /* SEPARATOR */\n    ) && (this.leadZero || !this.dropSpecialCharacters) || this.maskExpression.startsWith(\"separator\"\n    /* SEPARATOR */\n    ) && this.separatorLimit.length > 14 && String(value).length > 14) {\n      return String(value);\n    }\n\n    return Number(value).toLocaleString('fullwide', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    }).replace(`/${\"-\"\n    /* MINUS */\n    }/`, \"-\"\n    /* MINUS */\n    );\n  }\n\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === \"IP\"\n        /* IP */\n        ) {\n          return this._checkForIp(inputVal);\n        }\n\n        if (this.maskExpression === \"CPF_CNPJ\"\n        /* CPF_CNPJ */\n        ) {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n\n      if (this.placeHolderCharacter.length === this.maskExpression.length) {\n        return this.placeHolderCharacter;\n      }\n\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n\n    return '';\n  }\n\n  clearIfNotMatchFn() {\n    var _a;\n\n    const formElement = (_a = this._elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement;\n\n    if (!formElement) {\n      return;\n    }\n\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(this.placeHolderCharacter, \"\"\n    /* EMPTY_STRING */\n    ).length) {\n      this.formElementProperty = ['value', \"\"\n      /* EMPTY_STRING */\n      ];\n      this.applyMask('', this.maskExpression);\n    }\n  }\n\n  set formElementProperty([name, value]) {\n    if (!this._renderer || !this._elementRef) {\n      return;\n    }\n\n    Promise.resolve().then(() => {\n      var _a, _b;\n\n      return (_a = this._renderer) === null || _a === void 0 ? void 0 : _a.setProperty((_b = this._elementRef) === null || _b === void 0 ? void 0 : _b.nativeElement, name, value);\n    });\n  }\n\n  checkDropSpecialCharAmount(mask) {\n    const chars = mask.split(\"\"\n    /* EMPTY_STRING */\n    ).filter(item => this._findDropSpecialChar(item));\n    return chars.length;\n  }\n\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n\n  _checkForIp(inputVal) {\n    var _a;\n\n    if (inputVal === \"#\"\n    /* HASH */\n    ) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = (_a = inputVal[i]) !== null && _a !== void 0 ? _a : \"\"\n      /* EMPTY_STRING */\n      ;\n\n      if (!value) {\n        continue;\n      }\n\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n\n    return '';\n  }\n\n  _checkForCpfCnpj(inputVal) {\n    var _a;\n\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\n    if (inputVal === \"#\"\n    /* HASH */\n    ) {\n      return cpf;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = (_a = inputVal[i]) !== null && _a !== void 0 ? _a : \"\"\n      /* EMPTY_STRING */\n      ;\n\n      if (!value) {\n        continue;\n      }\n\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n\n    if (arr.length === 11) {\n      return '';\n    }\n\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n\n      return cnpj.slice(15, cnpj.length);\n    }\n\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n\n    return '';\n  }\n  /**\n   * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n   */\n\n\n  _getActiveElement(document = this.document) {\n    var _a;\n\n    const shadowRootEl = (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n\n    if (!(shadowRootEl === null || shadowRootEl === void 0 ? void 0 : shadowRootEl.activeElement)) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n\n\n  formControlResult(inputValue) {\n    if (this.writingValue || !this.triggerOnMaskChange && this.maskChanged) {\n      this.maskChanged ? this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue)))))) : '';\n      this.maskChanged = false;\n      return;\n    }\n\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)))));\n    } else if (this.dropSpecialCharacters || !this.dropSpecialCharacters && this.prefix === inputValue) {\n      this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))));\n    } else {\n      this.onChange(this.outputTransformFn(this._toNumber(inputValue)));\n    }\n  }\n\n  _toNumber(value) {\n    if (!this.isNumberValue || value === \"\"\n    /* EMPTY_STRING */\n    ) {\n      return value;\n    }\n\n    if (this.maskExpression.startsWith(\"separator\"\n    /* SEPARATOR */\n    ) && (this.leadZero || !this.dropSpecialCharacters)) {\n      return value;\n    }\n\n    if (String(value).length > 16 && this.separatorLimit.length > 14) {\n      return String(value);\n    }\n\n    const num = Number(value);\n\n    if (this.maskExpression.startsWith(\"separator\"\n    /* SEPARATOR */\n    ) && Number.isNaN(num)) {\n      const val = String(value).replace(',', '.');\n      return Number(val);\n    }\n\n    return Number.isNaN(num) ? value : num;\n  }\n\n  _removeMask(value, specialCharactersForRemove) {\n    if (this.maskExpression.startsWith(\"percent\"\n    /* PERCENT */\n    ) && value.includes(\".\"\n    /* DOT */\n    )) {\n      return value;\n    }\n\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), \"\"\n    /* EMPTY_STRING */\n    ) : value;\n  }\n\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n\n    return value ? value.replace(this.prefix, \"\"\n    /* EMPTY_STRING */\n    ) : value;\n  }\n\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n\n    return value ? value.replace(this.suffix, \"\"\n    /* EMPTY_STRING */\n    ) : value;\n  }\n\n  _retrieveSeparatorValue(result) {\n    let specialCharacters = Array.isArray(this.dropSpecialCharacters) ? this.specialCharacters.filter(v => {\n      return this.dropSpecialCharacters.includes(v);\n    }) : this.specialCharacters;\n\n    if (!this.deletedSpecialCharacter && this._checkPatternForSpace() && result.includes(\" \"\n    /* WHITE_SPACE */\n    ) && this.maskExpression.includes(\"*\"\n    /* SYMBOL_STAR */\n    )) {\n      specialCharacters = specialCharacters.filter(char => char !== \" \"\n      /* WHITE_SPACE */\n      );\n    }\n\n    return this._removeMask(result, specialCharacters);\n  }\n\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n\n  _replaceDecimalMarkerToDot(value) {\n    const markers = Array.isArray(this.decimalMarker) ? this.decimalMarker : [this.decimalMarker];\n    return value.replace(this._regExpForRemove(markers), \".\"\n    /* DOT */\n    );\n  }\n\n  _checkSymbols(result) {\n    if (result === \"\"\n    /* EMPTY_STRING */\n    ) {\n      return result;\n    }\n\n    if (this.maskExpression.startsWith(\"percent\"\n    /* PERCENT */\n    ) && this.decimalMarker === \",\"\n    /* COMMA */\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      result = result.replace(\",\"\n      /* COMMA */\n      , \".\"\n      /* DOT */\n      );\n    }\n\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n\n    const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n\n      if (this.separatorLimit.length > 14) {\n        return String(separatorValue);\n      }\n\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return separatorValue;\n    }\n  }\n\n  _checkPatternForSpace() {\n    var _a, _b, _c;\n\n    for (const key in this.patterns) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.patterns[key] && ((_a = this.patterns[key]) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('pattern'))) {\n        const patternString = (_b = this.patterns[key]) === null || _b === void 0 ? void 0 : _b.pattern.toString();\n        const pattern = (_c = this.patterns[key]) === null || _c === void 0 ? void 0 : _c.pattern;\n\n        if ((patternString === null || patternString === void 0 ? void 0 : patternString.includes(\" \"\n        /* WHITE_SPACE */\n        )) && (pattern === null || pattern === void 0 ? void 0 : pattern.test(this.maskExpression))) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  } // TODO should think about helpers or separting decimal precision to own property\n\n\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n\n  _checkPrecision(separatorExpression, separatorValue) {\n    const separatorPrecision = separatorExpression.slice(10, 11);\n\n    if (separatorExpression.indexOf('2') > 0 || this.leadZero && Number(separatorPrecision) > 1) {\n      if (this.decimalMarker === \",\"\n      /* COMMA */\n      && this.leadZero) {\n        // eslint-disable-next-line no-param-reassign\n        separatorValue = separatorValue.replace(',', '.');\n      }\n\n      return this.leadZero ? Number(separatorValue).toFixed(Number(separatorPrecision)) : Number(separatorValue).toFixed(2);\n    }\n\n    return this.numberToString(separatorValue);\n  }\n\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split(\"\"\n    /* EMPTY_STRING */\n    ).reduce((accum, currVal, index) => {\n      this._start = currVal === \"{\"\n      /* CURLY_BRACKETS_LEFT */\n      ? index : this._start;\n\n      if (currVal !== \"}\"\n      /* CURLY_BRACKETS_RIGHT */\n      ) {\n        return this._findSpecialChar(currVal) ? accum + currVal : accum;\n      }\n\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n\n      if (maskExp.slice(0, this._start).length > 1 && maskExp.includes(\"S\"\n      /* LETTER_S */\n      )) {\n        const symbols = maskExp.slice(0, this._start - 1);\n        return symbols.includes(\"{\"\n        /* CURLY_BRACKETS_LEFT */\n        ) ? accum + replaceWith : symbols + accum + replaceWith;\n      } else {\n        return accum + replaceWith;\n      }\n    }, '') || maskExp;\n  }\n\n  currentLocaleDecimalMarker() {\n    return 1.1.toLocaleString().substring(1, 2);\n  }\n\n}\n\nNgxMaskService.ɵfac = function NgxMaskService_Factory(t) {\n  return new (t || NgxMaskService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(NGX_MASK_CONFIG), i0.ɵɵinject(i0.ElementRef, 8), i0.ɵɵinject(i0.Renderer2, 8));\n};\n\nNgxMaskService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMaskService,\n  factory: NgxMaskService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_MASK_CONFIG]\n      }]\n    }, {\n      type: i0.ElementRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.Renderer2,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})(); // tslint:disable deprecation\n// tslint:disable no-input-rename\n\n\nclass NgxMaskDirective {\n  constructor( // tslint:disable-next-line\n  document, _config, _maskService) {\n    this.document = document;\n    this._config = _config;\n    this._maskService = _maskService; // eslint-disable-next-line @angular-eslint/no-input-rename\n\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this.leadZero = null;\n    this.triggerOnMaskChange = null;\n    this.apm = null;\n    this.inputTransformFn = null;\n    this.outputTransformFn = null;\n    this.keepCharacterPositions = null;\n    this.maskFilled = new EventEmitter();\n    this._maskValue = '';\n    this._isFocused = false;\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n    /**For IME composition event */\n\n    this._isComposing = false; // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n\n    this.onChange = _ => {}; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n    this.onTouch = () => {};\n  }\n\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n      leadZero,\n      triggerOnMaskChange,\n      apm,\n      inputTransformFn,\n      outputTransformFn,\n      keepCharacterPositions\n    } = changes;\n\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n\n      if (maskExpression.currentValue && maskExpression.currentValue.split(\"||\"\n      /* OR */\n      ).length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split(\"||\"\n        /* OR */\n        ).sort((a, b) => {\n          return a.length - b.length;\n        });\n\n        this._setMask();\n      } else {\n        this._maskExpressionArray = [];\n        this._maskValue = maskExpression.currentValue || \"\"\n        /* EMPTY_STRING */\n        ;\n        this._maskService.maskExpression = this._maskValue;\n      }\n    }\n\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.specialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.specialCharacters = this._maskService.specialCharacters.filter(c => c !== \"-\"\n        /* MINUS */\n        );\n      }\n    } // Only overwrite the mask available patterns if a pattern has actually been passed in\n\n\n    if (patterns && patterns.currentValue) {\n      this._maskService.patterns = patterns.currentValue;\n    }\n\n    if (apm && apm.currentValue) {\n      this._maskService.apm = apm.currentValue;\n    }\n\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n\n      if (showMaskTyped.previousValue === false && showMaskTyped.currentValue === true && this._isFocused) {\n        requestAnimationFrame(() => {\n          var _a;\n\n          (_a = this._maskService._elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement.click();\n        });\n      }\n    }\n\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n\n    if (leadZero) {\n      this._maskService.leadZero = leadZero.currentValue;\n    }\n\n    if (triggerOnMaskChange) {\n      this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n    }\n\n    if (inputTransformFn) {\n      this._maskService.inputTransformFn = inputTransformFn.currentValue;\n    }\n\n    if (outputTransformFn) {\n      this._maskService.outputTransformFn = outputTransformFn.currentValue;\n    }\n\n    if (keepCharacterPositions) {\n      this._maskService.keepCharacterPositions = keepCharacterPositions.currentValue;\n    }\n\n    this._applyMask();\n  } // eslint-disable-next-line complexity\n\n\n  validate({\n    value\n  }) {\n    var _a, _b, _c;\n\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskValue.startsWith(\"separator\"\n    /* SEPARATOR */\n    )) {\n      return null;\n    }\n\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n\n      if (this._maskValue.startsWith(\"percent\"\n      /* PERCENT */\n      )) {\n        return null;\n      }\n\n      for (const key in this._maskService.patterns) {\n        if ((_a = this._maskService.patterns[key]) === null || _a === void 0 ? void 0 : _a.optional) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split(\"\"\n            /* EMPTY_STRING */\n            ).filter(i => i === key).join(\"\"\n            /* EMPTY_STRING */\n            );\n\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n\n      if (this._maskValue.indexOf(\"{\"\n      /* CURLY_BRACKETS_LEFT */\n      ) === 1 && value.toString().length === this._maskValue.length + Number(((_b = this._maskValue.split(\"{\"\n      /* CURLY_BRACKETS_LEFT */\n      )[1]) !== null && _b !== void 0 ? _b : \"\"\n      /* EMPTY_STRING */\n      ).split(\"}\"\n      /* CURLY_BRACKETS_RIGHT */\n      )[0]) - 4) {\n        return null;\n      } else if (this._maskValue.indexOf(\"*\"\n      /* SYMBOL_STAR */\n      ) > 1 && value.toString().length < this._maskValue.indexOf(\"*\"\n      /* SYMBOL_STAR */\n      ) || this._maskValue.indexOf(\"?\"\n      /* SYMBOL_QUESTION */\n      ) > 1 && value.toString().length < this._maskValue.indexOf(\"?\"\n      /* SYMBOL_QUESTION */\n      ) || this._maskValue.indexOf(\"{\"\n      /* CURLY_BRACKETS_LEFT */\n      ) === 1) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskValue.indexOf(\"*\"\n      /* SYMBOL_STAR */\n      ) === -1 || this._maskValue.indexOf(\"?\"\n      /* SYMBOL_QUESTION */\n      ) === -1) {\n        // eslint-disable-next-line no-param-reassign\n        value = typeof value === 'number' ? String(value) : value;\n\n        const array = this._maskValue.split('*');\n\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkDropSpecialCharAmount(this._maskValue) - counterOfOpt : this.prefix ? this._maskValue.length + this.prefix.length - counterOfOpt : this._maskValue.length - counterOfOpt;\n\n        if (array.length === 1) {\n          if (value.toString().length < length) {\n            return this._createValidationError(value);\n          }\n        }\n\n        if (array.length > 1) {\n          const lastIndexArray = array[array.length - 1];\n\n          if (lastIndexArray && this._maskService.specialCharacters.includes(lastIndexArray[0]) && String(value).includes((_c = lastIndexArray[0]) !== null && _c !== void 0 ? _c : '') && !this.dropSpecialCharacters) {\n            const special = value.split(lastIndexArray[0]);\n            return special[special.length - 1].length === lastIndexArray.length - 1 ? null : this._createValidationError(value);\n          } else if ((lastIndexArray && !this._maskService.specialCharacters.includes(lastIndexArray[0]) || !lastIndexArray || this._maskService.dropSpecialCharacters) && value.length >= length - 1) {\n            return null;\n          } else {\n            return this._createValidationError(value);\n          }\n        }\n      }\n\n      if (this._maskValue.indexOf(\"*\"\n      /* SYMBOL_STAR */\n      ) === 1 || this._maskValue.indexOf(\"?\"\n      /* SYMBOL_QUESTION */\n      ) === 1) {\n        return null;\n      }\n    }\n\n    if (value) {\n      this.maskFilled.emit();\n      return null;\n    }\n\n    return null;\n  }\n\n  onPaste() {\n    this._justPasted = true;\n  }\n\n  onFocus() {\n    this._isFocused = true;\n  }\n\n  onModelChange(value) {\n    // on form reset we need to update the actualValue\n    if ((value === \"\"\n    /* EMPTY_STRING */\n    || value === null || value === undefined) && this._maskService.actualValue) {\n      this._maskService.actualValue = this._maskService.getActualValue(\"\"\n      /* EMPTY_STRING */\n      );\n    }\n  }\n\n  onInput(e) {\n    var _a, _b, _c, _d, _e; // If IME is composing text, we wait for the composed text.\n\n\n    if (this._isComposing) return;\n    const el = e.target;\n\n    const transformedValue = this._maskService.inputTransformFn(el.value);\n\n    if (el.type !== 'number') {\n      if (typeof transformedValue === 'string' || typeof transformedValue === 'number') {\n        el.value = transformedValue.toString();\n        this._inputValue = el.value;\n\n        this._setMask();\n\n        if (!this._maskValue) {\n          this.onChange(el.value);\n          return;\n        }\n\n        let position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n\n        if (this.showMaskTyped && this.keepCharacterPositions && this._maskService.placeHolderCharacter.length === 1) {\n          const inputSymbol = el.value.slice(position - 1, position);\n          const prefixLength = this.prefix.length;\n\n          const checkSymbols = this._maskService._checkSymbolMask(inputSymbol, (_a = this._maskService.maskExpression[position - 1 - prefixLength]) !== null && _a !== void 0 ? _a : \"\"\n          /* EMPTY_STRING */\n          );\n\n          const checkSpecialCharacter = this._maskService._checkSymbolMask(inputSymbol, (_b = this._maskService.maskExpression[position + 1 - prefixLength]) !== null && _b !== void 0 ? _b : \"\"\n          /* EMPTY_STRING */\n          );\n\n          const selectRangeBackspace = this._maskService.selStart === this._maskService.selEnd;\n          const selStart = (_c = Number(this._maskService.selStart) - prefixLength) !== null && _c !== void 0 ? _c : '';\n          const selEnd = (_d = Number(this._maskService.selEnd) - prefixLength) !== null && _d !== void 0 ? _d : '';\n\n          if (this._code === \"Backspace\"\n          /* BACKSPACE */\n          ) {\n            if (!selectRangeBackspace) {\n              if (this._maskService.selStart === prefixLength) {\n                this._maskService.actualValue = this.prefix + this._maskService.maskIsShown.slice(0, selEnd) + this._inputValue.split(this.prefix).join('');\n              } else if (this._maskService.selStart === this._maskService.maskIsShown.length + prefixLength) {\n                this._maskService.actualValue = this._inputValue + this._maskService.maskIsShown.slice(selStart, selEnd);\n              } else {\n                this._maskService.actualValue = this.prefix + this._inputValue.split(this.prefix).join('').slice(0, selStart) + this._maskService.maskIsShown.slice(selStart, selEnd) + this._maskService.actualValue.slice(selEnd + prefixLength, this._maskService.maskIsShown.length + prefixLength) + this.suffix;\n              }\n            } else if (!this._maskService.specialCharacters.includes(this._maskService.maskExpression.slice(position - this.prefix.length, position + 1 - this.prefix.length)) && selectRangeBackspace) {\n              if (selStart === 1 && this.prefix) {\n                this._maskService.actualValue = this.prefix + this._maskService.placeHolderCharacter + el.value.split(this.prefix).join('').split(this.suffix).join('') + this.suffix;\n                position = position - 1;\n              } else {\n                const part1 = el.value.substring(0, position);\n                const part2 = el.value.substring(position);\n                this._maskService.actualValue = part1 + this._maskService.placeHolderCharacter + part2;\n              }\n            }\n          }\n\n          if (this._code !== \"Backspace\"\n          /* BACKSPACE */\n          ) {\n            if (!checkSymbols && !checkSpecialCharacter && selectRangeBackspace) {\n              position = Number(el.selectionStart) - 1;\n            } else if (this._maskService.specialCharacters.includes(el.value.slice(position, position + 1)) && checkSpecialCharacter && !this._maskService.specialCharacters.includes(el.value.slice(position + 1, position + 2))) {\n              this._maskService.actualValue = el.value.slice(0, position - 1) + el.value.slice(position, position + 1) + inputSymbol + el.value.slice(position + 2);\n              position = position + 1;\n            } else if (checkSymbols) {\n              if (el.value.length === 1 && position === 1) {\n                this._maskService.actualValue = this.prefix + inputSymbol + this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length) + this.suffix;\n              } else {\n                this._maskService.actualValue = el.value.slice(0, position - 1) + inputSymbol + el.value.slice(position + 1).split(this.suffix).join('') + this.suffix;\n              }\n            } else if (this.prefix && el.value.length === 1 && position - prefixLength === 1 && this._maskService._checkSymbolMask(el.value, (_e = this._maskService.maskExpression[position - 1 - prefixLength]) !== null && _e !== void 0 ? _e : \"\"\n            /* EMPTY_STRING */\n            )) {\n              this._maskService.actualValue = this.prefix + el.value + this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length) + this.suffix;\n            }\n          }\n        }\n\n        let caretShift = 0;\n        let backspaceShift = false;\n\n        if (this._code === \"Delete\"\n        /* DELETE */\n        && \"separator\"\n        /* SEPARATOR */\n        ) {\n          this._maskService.deletedSpecialCharacter = true;\n        }\n\n        if (this._inputValue.length >= this._maskService.maskExpression.length - 1 && this._code !== \"Backspace\"\n        /* BACKSPACE */\n        && this._maskService.maskExpression === \"d0/M0/0000\"\n        /* DAYS_MONTHS_YEARS */\n        && position < 10) {\n          const inputSymbol = this._inputValue.slice(position - 1, position);\n\n          el.value = this._inputValue.slice(0, position - 1) + inputSymbol + this._inputValue.slice(position + 1);\n        }\n\n        if (this._maskService.maskExpression === \"d0/M0/0000\"\n        /* DAYS_MONTHS_YEARS */\n        && this.leadZeroDateTime) {\n          if (position < 3 && Number(el.value) > 31 && Number(el.value) < 40 || position === 5 && Number(el.value.slice(3, 5)) > 12) {\n            position = position + 2;\n          }\n        }\n\n        if (this._maskService.maskExpression === \"Hh:m0:s0\"\n        /* HOURS_MINUTES_SECONDS */\n        && this.apm) {\n          if (this._justPasted && el.value.slice(0, 2) === \"00\"\n          /* DOUBLE_ZERO */\n          ) {\n            el.value = el.value.slice(1, 2) + el.value.slice(2, el.value.length);\n          }\n\n          el.value = el.value === \"00\"\n          /* DOUBLE_ZERO */\n          ? \"0\"\n          /* NUMBER_ZERO */\n          : el.value;\n        }\n\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === \"Backspace\"\n        /* BACKSPACE */\n        || this._code === \"Delete\"\n        /* DELETE */\n        , (shift, _backspaceShift) => {\n          this._justPasted = false;\n          caretShift = shift;\n          backspaceShift = _backspaceShift;\n        }); // only set the selection if the element is active\n\n\n        if (this._getActiveElement() !== el) {\n          return;\n        }\n\n        if (this._maskService.plusOnePosition) {\n          position = position + 1;\n          this._maskService.plusOnePosition = false;\n        } // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n\n\n        if (this._maskExpressionArray.length) {\n          if (this._code === \"Backspace\"\n          /* BACKSPACE */\n          ) {\n            position = this.specialCharacters.includes(this._inputValue.slice(position - 1, position)) ? position - 1 : position;\n          } else {\n            position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n          }\n        }\n\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === \"Backspace\"\n        /* BACKSPACE */\n        && !backspaceShift ? 0 : caretShift);\n\n        if (positionToApply > this._getActualInputLength()) {\n          positionToApply = el.value === this._maskService.decimalMarker && el.value.length === 1 ? this._getActualInputLength() + 1 : this._getActualInputLength();\n        }\n\n        if (positionToApply < 0) {\n          positionToApply = 0;\n        }\n\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n      } else {\n        console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof transformedValue);\n      }\n    } else {\n      if (!this._maskValue) {\n        this.onChange(el.value);\n        return;\n      }\n\n      this._maskService.applyValueChanges(el.value.length, this._justPasted, this._code === \"Backspace\"\n      /* BACKSPACE */\n      || this._code === \"Delete\"\n      /* DELETE */\n      );\n    }\n  } // IME starts\n\n\n  onCompositionStart() {\n    this._isComposing = true;\n  } // IME completes\n\n\n  onCompositionEnd(e) {\n    this._isComposing = false;\n    this._justPasted = true;\n    this.onInput(e);\n  }\n\n  onBlur(e) {\n    if (this._maskValue) {\n      const el = e.target;\n\n      if (this.leadZero && el.value.length > 0 && typeof this.decimalMarker === 'string') {\n        const maskExpression = this._maskService.maskExpression;\n        const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\n\n        if (precision > 1) {\n          el.value = this.suffix ? el.value.split(this.suffix).join('') : el.value;\n          const decimalPart = el.value.split(this.decimalMarker)[1];\n          el.value = el.value.includes(this.decimalMarker) ? el.value + \"0\"\n          /* NUMBER_ZERO */\n          .repeat(precision - decimalPart.length) + this.suffix : el.value + this.decimalMarker + \"0\"\n          /* NUMBER_ZERO */\n          .repeat(precision) + this.suffix;\n          this._maskService.actualValue = el.value;\n        }\n      }\n\n      this._maskService.clearIfNotMatchFn();\n    }\n\n    this._isFocused = false;\n    this.onTouch();\n  }\n\n  onClick(e) {\n    if (!this._maskValue) {\n      return;\n    }\n\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // eslint-disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped && !this.keepCharacterPositions) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n\n    const nextValue = el && (el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value);\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\n    if (el && el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n\n\n    if (el && el.type !== 'number' && (el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n\n\n    if (el && el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  } // eslint-disable-next-line complexity\n\n\n  onKeyDown(e) {\n    var _a, _b;\n\n    if (!this._maskValue) {\n      return;\n    }\n\n    if (this._isComposing) {\n      // User finalize their choice from IME composition, so trigger onInput() for the composed text.\n      if (e.key === 'Enter') this.onCompositionEnd(e);\n      return;\n    }\n\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (el.type !== 'number') {\n      if (e.key === \"ArrowUp\"\n      /* ARROW_UP */\n      ) {\n        e.preventDefault();\n      }\n\n      if (e.key === \"ArrowLeft\"\n      /* ARROW_LEFT */\n      || e.key === \"Backspace\"\n      /* BACKSPACE */\n      || e.key === \"Delete\"\n      /* DELETE */\n      ) {\n        if (e.key === \"Backspace\"\n        /* BACKSPACE */\n        && el.value.length === 0) {\n          el.selectionStart = el.selectionEnd;\n        }\n\n        if (e.key === \"Backspace\"\n        /* BACKSPACE */\n        && el.selectionStart !== 0) {\n          // If specialChars is false, (shouldn't ever happen) then set to the defaults\n          this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters : this._config.specialCharacters;\n\n          if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n            el.setSelectionRange(this.prefix.length, el.selectionEnd);\n          } else {\n            if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n              while (this.specialCharacters.includes(((_b = this._inputValue[el.selectionStart - 1]) !== null && _b !== void 0 ? _b : \"\"\n              /* EMPTY_STRING */\n              ).toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n              }\n            }\n          }\n        }\n\n        this.checkSelectionOnDeletion(el);\n\n        if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n          e.preventDefault();\n        }\n\n        const cursorStart = el.selectionStart;\n\n        if (e.key === \"Backspace\"\n        /* BACKSPACE */\n        && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n          this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\n          this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n        }\n      }\n\n      if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      } else if (e.code === 'KeyA' && e.ctrlKey || e.code === 'KeyA' && e.metaKey // Cmd + A (Mac)\n      ) {\n        el.setSelectionRange(0, this._getActualInputLength());\n        e.preventDefault();\n      }\n\n      this._maskService.selStart = el.selectionStart;\n      this._maskService.selEnd = el.selectionEnd;\n    }\n  }\n  /** It writes the value in the input */\n\n\n  writeValue(controlValue) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof controlValue === 'object' && controlValue !== null && 'value' in controlValue) {\n        if ('disable' in controlValue) {\n          this.setDisabledState(Boolean(controlValue.disable));\n        } // eslint-disable-next-line no-param-reassign\n\n\n        controlValue = controlValue.value;\n      }\n\n      if (controlValue !== null) {\n        // eslint-disable-next-line no-param-reassign\n        controlValue = this.inputTransformFn ? this.inputTransformFn(controlValue) : controlValue;\n      }\n\n      if (typeof controlValue === 'string' || typeof controlValue === 'number' || controlValue === null || controlValue === undefined) {\n        if (controlValue === null || controlValue === undefined || controlValue === '') {\n          this._maskService._currentValue = '';\n          this._maskService._previousValue = '';\n        } // eslint-disable-next-line no-param-reassign\n\n\n        let inputValue = controlValue;\n\n        if (typeof inputValue === 'number' || this._maskValue.startsWith(\"separator\"\n        /* SEPARATOR */\n        )) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = String(inputValue);\n\n          const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n\n          if (!Array.isArray(this._maskService.decimalMarker)) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this._maskService.decimalMarker !== localeDecimalMarker ? inputValue.replace(localeDecimalMarker, this._maskService.decimalMarker) : inputValue;\n          }\n\n          if (this._maskService.leadZero && inputValue && this.maskExpression && this.dropSpecialCharacters !== false) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this._maskService._checkPrecision(this._maskService.maskExpression, inputValue);\n          }\n\n          if (this._maskService.decimalMarker === \",\"\n          /* COMMA */\n          ) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.toString().replace(\".\"\n            /* DOT */\n            , \",\"\n            /* COMMA */\n            );\n          }\n\n          if (((_a = this.maskExpression) === null || _a === void 0 ? void 0 : _a.startsWith(\"separator\"\n          /* SEPARATOR */\n          )) && this.leadZero) {\n            requestAnimationFrame(() => {\n              var _a;\n\n              this._maskService.applyMask((_a = inputValue === null || inputValue === void 0 ? void 0 : inputValue.toString()) !== null && _a !== void 0 ? _a : '', this._maskService.maskExpression);\n            });\n          }\n\n          this._maskService.isNumberValue = true;\n        }\n\n        if (typeof inputValue !== 'string') {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = '';\n        }\n\n        this._inputValue = inputValue;\n\n        this._setMask();\n\n        if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n          // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n          typeof this.inputTransformFn !== 'function' ? this._maskService.writingValue = true : '';\n          this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)]; // Let the service know we've finished writing value\n\n          typeof this.inputTransformFn !== 'function' ? this._maskService.writingValue = false : '';\n        } else {\n          this._maskService.formElementProperty = ['value', inputValue];\n        }\n\n        this._inputValue = inputValue;\n      } else {\n        console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof controlValue);\n      }\n    });\n  }\n\n  registerOnChange(fn) {\n    this._maskService.onChange = this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n\n  _getActiveElement(document = this.document) {\n    var _a;\n\n    const shadowRootEl = (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n\n    if (!(shadowRootEl === null || shadowRootEl === void 0 ? void 0 : shadowRootEl.activeElement)) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n\n  checkSelectionOnDeletion(el) {\n    el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n    el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n  }\n  /** It disables the input element */\n\n\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  _applyMask() {\n    this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n\n  _validateTime(value) {\n    var _a;\n\n    const rowMaskLen = this._maskValue.split(\"\"\n    /* EMPTY_STRING */\n    ).filter(s => s !== ':').length;\n\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if (+((_a = value[value.length - 1]) !== null && _a !== void 0 ? _a : -1) === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n\n    return null;\n  }\n\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n\n  _setMask() {\n    this._maskExpressionArray.some(mask => {\n      var _a, _b, _c, _d;\n\n      const specialChart = mask.split(\"\"\n      /* EMPTY_STRING */\n      ).some(char => this._maskService.specialCharacters.includes(char));\n\n      if (specialChart && this._inputValue && !mask.includes(\"S\"\n      /* LETTER_S */\n      ) || mask.includes(\"{\"\n      /* CURLY_BRACKETS_LEFT */\n      )) {\n        const test = ((_a = this._maskService.removeMask(this._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <= ((_b = this._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n\n        if (test) {\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = mask.includes(\"{\"\n          /* CURLY_BRACKETS_LEFT */\n          ) ? this._maskService._repeatPatternSymbols(mask) : mask;\n          return test;\n        } else {\n          const expression = (_c = this._maskExpressionArray[this._maskExpressionArray.length - 1]) !== null && _c !== void 0 ? _c : \"\"\n          /* EMPTY_STRING */\n          ;\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = expression.includes(\"{\"\n          /* CURLY_BRACKETS_LEFT */\n          ) ? this._maskService._repeatPatternSymbols(expression) : expression;\n        }\n      } else {\n        const check = (_d = this._maskService.removeMask(this._inputValue)) === null || _d === void 0 ? void 0 : _d.split(\"\"\n        /* EMPTY_STRING */\n        ).every((character, index) => {\n          const indexMask = mask.charAt(index);\n          return this._maskService._checkSymbolMask(character, indexMask);\n        });\n\n        if (check) {\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = mask;\n          return check;\n        }\n      }\n    });\n  }\n\n}\n\nNgxMaskDirective.ɵfac = function NgxMaskDirective_Factory(t) {\n  return new (t || NgxMaskDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(NGX_MASK_CONFIG), i0.ɵɵdirectiveInject(NgxMaskService));\n};\n\nNgxMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMaskDirective,\n  selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n  hostBindings: function NgxMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"paste\", function NgxMaskDirective_paste_HostBindingHandler() {\n        return ctx.onPaste();\n      })(\"focus\", function NgxMaskDirective_focus_HostBindingHandler($event) {\n        return ctx.onFocus($event);\n      })(\"ngModelChange\", function NgxMaskDirective_ngModelChange_HostBindingHandler($event) {\n        return ctx.onModelChange($event);\n      })(\"input\", function NgxMaskDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      })(\"compositionstart\", function NgxMaskDirective_compositionstart_HostBindingHandler($event) {\n        return ctx.onCompositionStart($event);\n      })(\"compositionend\", function NgxMaskDirective_compositionend_HostBindingHandler($event) {\n        return ctx.onCompositionEnd($event);\n      })(\"blur\", function NgxMaskDirective_blur_HostBindingHandler($event) {\n        return ctx.onBlur($event);\n      })(\"click\", function NgxMaskDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function NgxMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    maskExpression: [\"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\",\n    leadZero: \"leadZero\",\n    triggerOnMaskChange: \"triggerOnMaskChange\",\n    apm: \"apm\",\n    inputTransformFn: \"inputTransformFn\",\n    outputTransformFn: \"outputTransformFn\",\n    keepCharacterPositions: \"keepCharacterPositions\"\n  },\n  outputs: {\n    maskFilled: \"maskFilled\"\n  },\n  exportAs: [\"mask\", \"ngxMask\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgxMaskDirective),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NgxMaskDirective),\n    multi: true\n  }, NgxMaskService]), i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgxMaskDirective),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => NgxMaskDirective),\n        multi: true\n      }, NgxMaskService],\n      exportAs: 'mask,ngxMask'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_MASK_CONFIG]\n      }]\n    }, {\n      type: NgxMaskService\n    }];\n  }, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    leadZero: [{\n      type: Input\n    }],\n    triggerOnMaskChange: [{\n      type: Input\n    }],\n    apm: [{\n      type: Input\n    }],\n    inputTransformFn: [{\n      type: Input\n    }],\n    outputTransformFn: [{\n      type: Input\n    }],\n    keepCharacterPositions: [{\n      type: Input\n    }],\n    maskFilled: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focus', ['$event']]\n    }],\n    onModelChange: [{\n      type: HostListener,\n      args: ['ngModelChange', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onCompositionStart: [{\n      type: HostListener,\n      args: ['compositionstart', ['$event']]\n    }],\n    onCompositionEnd: [{\n      type: HostListener,\n      args: ['compositionend', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur', ['$event']]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass NgxMaskPipe {\n  constructor(_maskService) {\n    this._maskService = _maskService;\n    this.defaultOptions = {};\n    this._maskExpressionArray = [];\n    this.mask = '';\n  }\n\n  transform(value, mask, _a = {}) {\n    var {\n      patterns\n    } = _a,\n        config = __rest(_a, [\"patterns\"]);\n\n    const currentConfig = Object.assign(Object.assign(Object.assign({\n      maskExpression: mask\n    }, this.defaultOptions), config), {\n      patterns: Object.assign(Object.assign({}, this._maskService.patterns), patterns)\n    });\n    Object.entries(currentConfig).forEach(([key, value]) => {\n      //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n      this._maskService[key] = value;\n    });\n\n    if (mask.includes('||')) {\n      if (mask.split('||').length > 1) {\n        this._maskExpressionArray = mask.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n\n        this._setMask(value);\n\n        return this._maskService.applyMask(`${value}`, this.mask);\n      } else {\n        this._maskExpressionArray = [];\n        return this._maskService.applyMask(`${value}`, this.mask);\n      }\n    }\n\n    if (mask.includes(\"{\"\n    /* CURLY_BRACKETS_LEFT */\n    )) {\n      return this._maskService.applyMask(`${value}`, this._maskService._repeatPatternSymbols(mask));\n    }\n\n    if (mask.startsWith(\"separator\"\n    /* SEPARATOR */\n    )) {\n      if (config.decimalMarker) {\n        this._maskService.decimalMarker = config.decimalMarker;\n      }\n\n      if (config.thousandSeparator) {\n        this._maskService.thousandSeparator = config.thousandSeparator;\n      }\n\n      if (config.leadZero) {\n        // eslint-disable-next-line no-param-reassign\n        this._maskService.leadZero = config.leadZero;\n      } // eslint-disable-next-line no-param-reassign\n\n\n      value = String(value);\n\n      const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n\n      if (!Array.isArray(this._maskService.decimalMarker)) {\n        // eslint-disable-next-line no-param-reassign\n        value = this._maskService.decimalMarker !== localeDecimalMarker ? value.replace(localeDecimalMarker, this._maskService.decimalMarker) : value;\n      }\n\n      if (this._maskService.leadZero && value && this._maskService.dropSpecialCharacters !== false) {\n        // eslint-disable-next-line no-param-reassign\n        value = this._maskService._checkPrecision(mask, value);\n      }\n\n      if (this._maskService.decimalMarker === \",\"\n      /* COMMA */\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        value = value.toString().replace(\".\"\n        /* DOT */\n        , \",\"\n        /* COMMA */\n        );\n      }\n\n      this._maskService.isNumberValue = true;\n    }\n\n    if (value === null || value === undefined) {\n      return this._maskService.applyMask('', mask);\n    }\n\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n\n  _setMask(value) {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        var _a, _b, _c;\n\n        const test = ((_a = this._maskService.removeMask(value)) === null || _a === void 0 ? void 0 : _a.length) <= ((_b = this._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n\n        if (value && test) {\n          this.mask = mask;\n          return test;\n        } else {\n          const expression = (_c = this._maskExpressionArray[this._maskExpressionArray.length - 1]) !== null && _c !== void 0 ? _c : \"\"\n          /* EMPTY_STRING */\n          ;\n          this.mask = expression;\n        }\n      });\n    }\n  }\n\n}\n\nNgxMaskPipe.ɵfac = function NgxMaskPipe_Factory(t) {\n  return new (t || NgxMaskPipe)(i0.ɵɵdirectiveInject(NgxMaskService, 16));\n};\n\nNgxMaskPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"mask\",\n  type: NgxMaskPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true\n    }]\n  }], function () {\n    return [{\n      type: NgxMaskService\n    }];\n  }, null);\n})();\n/**\n * @internal\n */\n\n\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\n\nclass NgxMaskModule {\n  static forRoot(configValue) {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [{\n        provide: NEW_CONFIG,\n        useValue: configValue\n      }, {\n        provide: INITIAL_CONFIG,\n        useValue: initialConfig\n      }, {\n        provide: NGX_MASK_CONFIG,\n        useFactory: _configFactory,\n        deps: [INITIAL_CONFIG, NEW_CONFIG]\n      }, NgxMaskService]\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: NgxMaskModule\n    };\n  }\n\n}\n\nNgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) {\n  return new (t || NgxMaskModule)();\n};\n\nNgxMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMaskModule\n});\nNgxMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskModule, [{\n    type: NgModule,\n    args: [{\n      exports: [NgxMaskDirective, NgxMaskPipe],\n      declarations: [NgxMaskDirective, NgxMaskPipe]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskModule, NgxMaskPipe, NgxMaskService, _configFactory, initialConfig, timeMasks, withoutValidation };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Injectable","Inject","Optional","forwardRef","Directive","Input","Output","HostListener","Pipe","NgModule","__awaiter","__rest","DOCUMENT","NG_VALUE_ACCESSOR","NG_VALIDATORS","NGX_MASK_CONFIG","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","apm","leadZero","keepCharacterPositions","triggerOnMaskChange","inputTransformFn","value","outputTransformFn","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","NgxMaskApplierService","constructor","_config","_shift","Set","plusOnePosition","maskExpression","actualValue","showKeepCharacterExp","deletedSpecialCharacter","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","_a","_b","_c","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substring","percentage","sanitizedStr","Number","isNaN","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","_d","i","substr","includes","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","precisionMatchLength","diff","_compareOrIncludes","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","valuesIP","ipError","_validIP","arr","push","cpfCnpjError","startsWith","_stripToDecimal","base","_splitPercentZero","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","symbolStarInPattern","_checkSymbolMask","_shiftStep","daysCount","inputValueCursor","inputValueCursorPlusOne","inputValueCursorPlusTwo","inputValueCursorMinusOne","inputValueCursorMinusTwo","inputValueCursorMinusThree","inputValueSliceMinusThreeMinusOne","inputValueSliceMinusOnePlusOne","inputValueSliceCursorPlusTwo","inputValueSliceMinusTwoCursor","maskStartWithMonth","startWithMonthInput","monthsCount","withoutDays","specialChart","day1monthInput","day2monthInput","day2monthInputDot","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","_findDropSpecialChar","val","maskSymbol","filter","idx","isDecimalMarker","charsToEscape","inputLength","comparedValue","excludedValue","some","index","decimalIndex","parsedValue","parseInt","integerPart","decimalPart","integerString","decimal","ɵfac","ɵprov","type","decorators","args","NgxMaskService","document","_elementRef","_renderer","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","_maskExpressionArray","_emitValue","_previousValue","_currentValue","onChange","_","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","maskChar","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkDropSpecialCharAmount","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_checkPatternForSpace","_replaceDecimalMarkerToDot","markers","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","key","hasOwnProperty","patternString","maskExpretion","matcher","separatorExpression","toFixed","_repeatPatternSymbols","maskExp","reduce","accum","currVal","_start","_end","repeatNumber","replaceWith","symbols","currentLocaleDecimalMarker","ElementRef","Renderer2","NgxMaskDirective","_maskService","_maskValue","_isFocused","_position","_justPasted","_isComposing","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","_setMask","c","requestAnimationFrame","click","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","lastIndexOf","opt","array","lastIndexArray","special","emit","onPaste","onFocus","onModelChange","onInput","e","el","target","transformedValue","_inputValue","selectionStart","prefixLength","checkSymbols","checkSpecialCharacter","selectRangeBackspace","_code","part1","part2","caretShift","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","console","warn","onCompositionStart","onCompositionEnd","onBlur","repeat","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","controlValue","setDisabledState","disable","localeDecimalMarker","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","rowMaskLen","requiredMask","expression","check","character","indexMask","charAt","ɵdir","provide","useExisting","selector","providers","exportAs","NgxMaskPipe","defaultOptions","transform","config","currentConfig","Object","assign","entries","forEach","ɵpipe","pure","_configFactory","initConfig","configValue","Function","NgxMaskModule","forRoot","ngModule","useValue","useFactory","deps","forChild","ɵmod","ɵinj","exports","declarations"],"sources":["D:/WS-FRONTEND/cliente-transacoes-banco-frontend/node_modules/ngx-mask/fesm2015/ngx-mask.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, Optional, forwardRef, Directive, Input, Output, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter, __rest } from 'tslib';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // eslint-disable-next-line @typescript-eslint/quotes\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    apm: false,\n    leadZero: false,\n    keepCharacterPositions: false,\n    triggerOnMaskChange: false,\n    inputTransformFn: (value) => value,\n    outputTransformFn: (value) => value,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = [\n    \"Hh:m0:s0\" /* HOURS_MINUTES_SECONDS */,\n    \"Hh:m0\" /* HOURS_MINUTES */,\n    \"m0:s0\" /* MINUTES_SECONDS */,\n];\nconst withoutValidation = [\n    \"percent\" /* PERCENT */,\n    \"Hh\" /* HOURS_HOUR */,\n    \"s0\" /* SECONDS */,\n    \"m0\" /* MINUTES */,\n    \"separator\" /* SEPARATOR */,\n    \"d0/M0/0000\" /* DAYS_MONTHS_YEARS */,\n    \"d0/M0\" /* DAYS_MONTHS */,\n    \"d0\" /* DAYS */,\n    \"M0\" /* MONTHS */,\n];\n\nclass NgxMaskApplierService {\n    constructor(_config) {\n        this._config = _config;\n        this._shift = new Set();\n        this.plusOnePosition = false;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.showKeepCharacterExp = '';\n        this.shownMaskExpression = '';\n        this.deletedSpecialCharacter = false;\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n            var _a, _b, _c;\n            let x = [];\n            let decimalChar = '';\n            if (Array.isArray(decimalChars)) {\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n                x = str.split(regExp);\n                decimalChar = (_b = (_a = str.match(regExp)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : \"\" /* EMPTY_STRING */;\n            }\n            else {\n                x = str.split(decimalChars);\n                decimalChar = decimalChars;\n            }\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : \"\" /* EMPTY_STRING */;\n            let res = (_c = x[0]) !== null && _c !== void 0 ? _c : \"\" /* EMPTY_STRING */;\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, \"\" /* EMPTY_STRING */);\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === \"-\" /* MINUS */) {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substring(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            const sanitizedStr = str.replace(',', '.');\n            const value = Number(sanitizedStr);\n            return !isNaN(value) && value >= 0 && value <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split(\".\" /* DOT */);\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            var _a, _b, _c, _d;\n            for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n                const substr = this.suffix.substring(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n                if (inputValue.includes(substr) &&\n                    i !== ((_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length) - 1 &&\n                    (i - 1 < 0 ||\n                        !inputValue.includes(this.suffix.substring(i - 1, (_d = this.suffix) === null || _d === void 0 ? void 0 : _d.length)))) {\n                    return inputValue.replace(substr, \"\" /* EMPTY_STRING */);\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            var _a, _b;\n            if (precision < Infinity) {\n                // TODO need think about decimalMarker\n                if (Array.isArray(decimalMarker)) {\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                    // eslint-disable-next-line no-param-reassign\n                    decimalMarker = marker ? marker : decimalMarker[0];\n                }\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                const precisionMatchLength = (_b = (precisionMatch && ((_a = precisionMatch[0]) === null || _a === void 0 ? void 0 : _a.length))) !== null && _b !== void 0 ? _b : 0;\n                if (precisionMatchLength - 1 > precision) {\n                    const diff = precisionMatchLength - 1 - precision;\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 &&\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.hiddenInput = this._config.hiddenInput;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.specialCharacters = this._config.specialCharacters;\n        this.patterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n        this.leadZero = this._config.leadZero;\n        this.apm = this._config.apm;\n        this.inputTransformFn = this._config.inputTransformFn;\n        this.outputTransformFn = this._config.outputTransformFn;\n        this.keepCharacterPositions = this._config.keepCharacterPositions;\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return \"\" /* EMPTY_STRING */;\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        if (inputValue === '(' && this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = '';\n        }\n        const inputArray = inputValue.toString().split(\"\" /* EMPTY_STRING */);\n        if (this.allowNegativeNumbers &&\n            inputValue.slice(cursor, cursor + 1) === \"-\" /* MINUS */) {\n            // eslint-disable-next-line no-param-reassign\n            result += inputValue.slice(cursor, cursor + 1);\n        }\n        if (maskExpression === \"IP\" /* IP */) {\n            const valuesIP = inputValue.split(\".\" /* DOT */);\n            this.ipError = this._validIP(valuesIP);\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if ((_a = inputValue[i]) === null || _a === void 0 ? void 0 : _a.match('\\\\d')) {\n                arr.push((_b = inputValue[i]) !== null && _b !== void 0 ? _b : \"\" /* EMPTY_STRING */);\n            }\n        }\n        if (maskExpression === \"CPF_CNPJ\" /* CPF_CNPJ */) {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith(\"percent\" /* PERCENT */)) {\n            if (inputValue.match('[a-z]|[A-Z]') ||\n                // eslint-disable-next-line no-useless-escape\n                (inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* DOT */;\n            if (inputValue.indexOf(decimalMarker) > 0 &&\n                !this.percentage(inputValue.substring(0, inputValue.indexOf(decimalMarker)))) {\n                let base = inputValue.substring(0, inputValue.indexOf(decimalMarker) - 1);\n                if (this.allowNegativeNumbers &&\n                    inputValue.slice(cursor, cursor + 1) === \"-\" /* MINUS */ &&\n                    !backspaced) {\n                    base = inputValue.substring(0, inputValue.indexOf(decimalMarker));\n                }\n                // eslint-disable-next-line no-param-reassign\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf(decimalMarker), inputValue.length)}`;\n            }\n            let value = '';\n            this.allowNegativeNumbers &&\n                inputValue.slice(cursor, cursor + 1) === \"-\" /* MINUS */\n                ? (value = inputValue.slice(cursor + 1, cursor + inputValue.length))\n                : (value = inputValue);\n            if (this.percentage(value)) {\n                result = this._splitPercentZero(inputValue);\n            }\n            else {\n                result = this._splitPercentZero(inputValue.substring(0, inputValue.length - 1));\n            }\n        }\n        else if (maskExpression.startsWith(\"separator\" /* SEPARATOR */)) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            const precision = this.getPrecision(maskExpression);\n            const decimalMarker = Array.isArray(this.decimalMarker)\n                ? \".\" /* DOT */\n                : this.decimalMarker;\n            if (precision === 0) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.allowNegativeNumbers\n                    ? inputValue.length > 2 &&\n                        inputValue[0] === \"-\" /* MINUS */ &&\n                        inputValue[1] === \"0\" /* NUMBER_ZERO */ &&\n                        inputValue[2] !== this.thousandSeparator &&\n                        inputValue[2] !== \",\" /* COMMA */ &&\n                        inputValue[2] !== \".\" /* DOT */\n                        ? '-' + inputValue.slice(2, inputValue.length)\n                        : inputValue[0] === \"0\" /* NUMBER_ZERO */ &&\n                            inputValue.length > 1 &&\n                            inputValue[1] !== this.thousandSeparator &&\n                            inputValue[1] !== \",\" /* COMMA */ &&\n                            inputValue[1] !== \".\" /* DOT */\n                            ? inputValue.slice(1, inputValue.length)\n                            : inputValue\n                    : inputValue.length > 1 &&\n                        inputValue[0] === \"0\" /* NUMBER_ZERO */ &&\n                        inputValue[1] !== this.thousandSeparator &&\n                        inputValue[1] !== \",\" /* COMMA */ &&\n                        inputValue[1] !== \".\" /* DOT */\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                if (inputValue[0] === decimalMarker && inputValue.length > 1) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        \"0\" /* NUMBER_ZERO */ + inputValue.slice(0, inputValue.length + 1);\n                    this.plusOnePosition = true;\n                }\n                if (inputValue[0] === \"0\" /* NUMBER_ZERO */ &&\n                    inputValue[1] !== decimalMarker &&\n                    inputValue[1] !== this.thousandSeparator) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        inputValue.length > 1\n                            ? inputValue.slice(0, 1) +\n                                decimalMarker +\n                                inputValue.slice(1, inputValue.length + 1)\n                            : inputValue;\n                    this.plusOnePosition = true;\n                }\n                if (this.allowNegativeNumbers &&\n                    inputValue[0] === \"-\" /* MINUS */ &&\n                    (inputValue[1] === decimalMarker ||\n                        inputValue[1] === \"0\" /* NUMBER_ZERO */)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue =\n                        inputValue[1] === decimalMarker && inputValue.length > 2\n                            ? inputValue.slice(0, 1) +\n                                \"0\" /* NUMBER_ZERO */ +\n                                inputValue.slice(1, inputValue.length)\n                            : inputValue[1] === \"0\" /* NUMBER_ZERO */ &&\n                                inputValue.length > 2 &&\n                                inputValue[2] !== decimalMarker\n                                ? inputValue.slice(0, 2) +\n                                    decimalMarker +\n                                    inputValue.slice(2, inputValue.length)\n                                : inputValue;\n                    this.plusOnePosition = true;\n                }\n            }\n            if (backspaced) {\n                if (inputValue[0] === \"0\" /* NUMBER_ZERO */ &&\n                    inputValue[1] === this.decimalMarker &&\n                    (inputValue[position] === \"0\" /* NUMBER_ZERO */ ||\n                        inputValue[position] === this.decimalMarker)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.slice(2, inputValue.length);\n                }\n                if (inputValue[0] === \"-\" /* MINUS */ &&\n                    inputValue[1] === \"0\" /* NUMBER_ZERO */ &&\n                    inputValue[2] === this.decimalMarker &&\n                    (inputValue[position] === \"0\" /* NUMBER_ZERO */ ||\n                        inputValue[position] === this.decimalMarker)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = \"-\" /* MINUS */ + inputValue.slice(3, inputValue.length);\n                }\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator)\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            }\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            //.replace(decimalMarkerEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), \"\" /* EMPTY_STRING */);\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(\",\" /* COMMA */) - inputValue.indexOf(\",\" /* COMMA */);\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== this.thousandSeparator) {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if (result[position - 1] === this.decimalMarker ||\n                shiftStep === -4 ||\n                shiftStep === -3 ||\n                result[position] === \",\" /* COMMA */) {\n                this._shift.clear();\n                this._shift.add(position - 1);\n            }\n            else if ((commaShift !== 0 &&\n                position > 0 &&\n                !(result.indexOf(\",\" /* COMMA */) >= position && position > 3)) ||\n                (!(result.indexOf(\".\" /* DOT */) >= position && position > 3) &&\n                    shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                // eslint-disable-next-line no-param-reassign\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // eslint-disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = (_c = inputArray[i]) !== null && _c !== void 0 ? _c : \"\" /* EMPTY_STRING */) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                const symbolStarInPattern = \"*\" /* SYMBOL_STAR */ in this.patterns;\n                if (this._checkSymbolMask(inputSymbol, (_d = maskExpression[cursor]) !== null && _d !== void 0 ? _d : \"\" /* EMPTY_STRING */) &&\n                    maskExpression[cursor + 1] === \"?\" /* SYMBOL_QUESTION */) {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === \"*\" /* SYMBOL_STAR */ &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, (_e = maskExpression[cursor + 2]) !== null && _e !== void 0 ? _e : \"\" /* EMPTY_STRING */)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, (_f = maskExpression[cursor]) !== null && _f !== void 0 ? _f : \"\" /* EMPTY_STRING */) &&\n                    maskExpression[cursor + 1] === \"*\" /* SYMBOL_STAR */ &&\n                    !symbolStarInPattern) {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === \"?\" /* SYMBOL_QUESTION */ &&\n                    this._checkSymbolMask(inputSymbol, (_g = maskExpression[cursor + 2]) !== null && _g !== void 0 ? _g : \"\" /* EMPTY_STRING */)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, (_h = maskExpression[cursor]) !== null && _h !== void 0 ? _h : \"\" /* EMPTY_STRING */)) {\n                    if (maskExpression[cursor] === \"H\" /* HOURS */) {\n                        if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"h\" /* HOUR */) {\n                        if (this.apm\n                            ? (result.length === 1 && Number(result) > 1) ||\n                                (result === '1' && Number(inputSymbol) > 2) ||\n                                (inputValue.slice(cursor - 1, cursor).length === 1 &&\n                                    Number(inputValue.slice(cursor - 1, cursor)) > 2) ||\n                                (inputValue.slice(cursor - 1, cursor) === '1' &&\n                                    Number(inputSymbol) > 2)\n                            : (result === '2' && Number(inputSymbol) > 3) ||\n                                ((result.slice(cursor - 2, cursor) === '2' ||\n                                    result.slice(cursor - 3, cursor) === '2' ||\n                                    result.slice(cursor - 4, cursor) === '2' ||\n                                    result.slice(cursor - 1, cursor) === '2') &&\n                                    Number(inputSymbol) > 3 &&\n                                    cursor > 10)) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = position + 1;\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"m\" /* MINUTE */ ||\n                        maskExpression[cursor] === \"s\" /* SECOND */) {\n                        if (Number(inputSymbol) > 5) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    const inputValueCursor = inputValue[cursor];\n                    const inputValueCursorPlusOne = inputValue[cursor + 1];\n                    const inputValueCursorPlusTwo = inputValue[cursor + 2];\n                    const inputValueCursorMinusOne = inputValue[cursor - 1];\n                    const inputValueCursorMinusTwo = inputValue[cursor - 2];\n                    const inputValueCursorMinusThree = inputValue[cursor - 3];\n                    const inputValueSliceMinusThreeMinusOne = inputValue.slice(cursor - 3, cursor - 1);\n                    const inputValueSliceMinusOnePlusOne = inputValue.slice(cursor - 1, cursor + 1);\n                    const inputValueSliceCursorPlusTwo = inputValue.slice(cursor, cursor + 2);\n                    const inputValueSliceMinusTwoCursor = inputValue.slice(cursor - 2, cursor);\n                    if (maskExpression[cursor] === \"d\" /* DAY */) {\n                        const maskStartWithMonth = maskExpression.slice(0, 2) === \"M0\" /* MONTHS */;\n                        const startWithMonthInput = maskExpression.slice(0, 2) === \"M0\" /* MONTHS */ &&\n                            this.specialCharacters.includes(inputValueCursorMinusTwo);\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            (!maskStartWithMonth &&\n                                (Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) ||\n                            (startWithMonthInput\n                                ? Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    (!this.specialCharacters.includes(inputValueCursor) &&\n                                        this.specialCharacters.includes(inputValueCursorPlusTwo)) ||\n                                    this.specialCharacters.includes(inputValueCursor)\n                                : Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"M\" /* MONTH */) {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\n                        // day<10 && month<12 for input\n                        const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\n                        const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) &&\n                            ((this.specialCharacters.includes(inputValueCursorMinusTwo) &&\n                                Number(inputValueSliceMinusOnePlusOne) > monthsCount &&\n                                !this.specialCharacters.includes(inputValueCursor)) ||\n                                this.specialCharacters.includes(inputValueCursor) ||\n                                (this.specialCharacters.includes(inputValueCursorMinusThree) &&\n                                    Number(inputValueSliceMinusTwoCursor) > monthsCount &&\n                                    !this.specialCharacters.includes(inputValueCursorMinusOne)) ||\n                                this.specialCharacters.includes(inputValueCursorMinusOne));\n                        //  month<12 && day<10 for input\n                        const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            (Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\n                        // cursor === 5 && without days\n                        const day2monthInputDot = (Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5) ||\n                            (this.specialCharacters.includes(inputValueCursorPlusOne) &&\n                                cursor === 5);\n                        // // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) &&\n                            Number(inputValueSliceMinusTwoCursor) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            Number(inputValueSliceMinusOnePlusOne) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthPaste ||\n                            day1monthPaste ||\n                            day2monthInput ||\n                            (day2monthInputDot && !this.leadZeroDateTime)) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = !this.leadZeroDateTime ? position + 1 : position;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if ((inputSymbol === \" \" /* WHITE_SPACE */ &&\n                    maskExpression[cursor] === \" \" /* WHITE_SPACE */) ||\n                    (inputSymbol === \"/\" /* SLASH */ &&\n                        maskExpression[cursor] === \"/\" /* SLASH */)) {\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.specialCharacters.indexOf((_j = maskExpression[cursor]) !== null && _j !== void 0 ? _j : \"\" /* EMPTY_STRING */) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (maskExpression[cursor] === \"9\" /* NUMBER_NINE */ &&\n                    this.showMaskTyped) {\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                }\n                else if (this.patterns[(_k = maskExpression[cursor]) !== null && _k !== void 0 ? _k : \"\" /* EMPTY_STRING */] &&\n                    ((_m = this.patterns[(_l = maskExpression[cursor]) !== null && _l !== void 0 ? _l : \"\" /* EMPTY_STRING */]) === null || _m === void 0 ? void 0 : _m.optional)) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/) &&\n                        !((_p = this.patterns[(_o = maskExpression[cursor]) !== null && _o !== void 0 ? _o : \"\" /* EMPTY_STRING */]) === null || _p === void 0 ? void 0 : _p.optional)) {\n                        result += inputArray[cursor];\n                    }\n                    if (maskExpression.includes(\"9\" /* NUMBER_NINE */ + \"*\" /* SYMBOL_STAR */) &&\n                        maskExpression.includes(\"0\" /* NUMBER_ZERO */ + \"*\" /* SYMBOL_STAR */)) {\n                        cursor++;\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === \"*\" /* SYMBOL_STAR */ &&\n                    this._findSpecialChar((_q = this.maskExpression[cursor + 2]) !== null && _q !== void 0 ? _q : \"\" /* EMPTY_STRING */) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === \"?\" /* SYMBOL_QUESTION */ &&\n                    this._findSpecialChar((_r = this.maskExpression[cursor + 2]) !== null && _r !== void 0 ? _r : \"\" /* EMPTY_STRING */) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.specialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter &&\n                    this.placeHolderCharacter.length === 1) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.specialCharacters.indexOf((_s = maskExpression[maskExpression.length - 1]) !== null && _s !== void 0 ? _s : \"\" /* EMPTY_STRING */) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith(\"separator\" /* SEPARATOR */)\n            ? cursor\n            : this._shift.has(position)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.specialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? \"\" /* EMPTY_STRING */ : result}${this.showMaskTyped ? '' : this.suffix}`;\n        if (result.length === 0) {\n            res = !this.dropSpecialCharacters ? `${this.prefix}${result}` : `${result}`;\n        }\n        if (result.includes(\"-\" /* MINUS */) && this.prefix && this.allowNegativeNumbers) {\n            if (backspaced && result === \"-\" /* MINUS */) {\n                return '';\n            }\n            res = `${\"-\" /* MINUS */}${this.prefix}${result\n                .split(\"-\" /* MINUS */)\n                .join(\"\" /* EMPTY_STRING */)}${this.suffix}`;\n        }\n        return res;\n    }\n    _findDropSpecialChar(inputSymbol) {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            return this.dropSpecialCharacters.find((val) => val === inputSymbol);\n        }\n        return this._findSpecialChar(inputSymbol);\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.specialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        var _a, _b, _c;\n        this.patterns = this.customPattern ? this.customPattern : this.patterns;\n        return ((_c = (((_a = this.patterns[maskSymbol]) === null || _a === void 0 ? void 0 : _a.pattern) &&\n            ((_b = this.patterns[maskSymbol]) === null || _b === void 0 ? void 0 : _b.pattern.test(inputSymbol)))) !== null && _c !== void 0 ? _c : false);\n    }\n    _stripToDecimal(str) {\n        return str\n            .split(\"\" /* EMPTY_STRING */)\n            .filter((i, idx) => {\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\n                ? i === this.decimalMarker\n                : // TODO (inepipenko) use utility type\n                    this.decimalMarker.includes(i);\n            return (i.match('^-?\\\\d') ||\n                i === this.thousandSeparator ||\n                isDecimalMarker ||\n                (i === \"-\" /* MINUS */ && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join(\"\" /* EMPTY_STRING */);\n    }\n    _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n            ? inputLength\n            : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n    _validIP(valuesIP) {\n        return !(valuesIP.length === 4 &&\n            !valuesIP.some((value, index) => {\n                if (valuesIP.length !== index + 1) {\n                    return value === \"\" /* EMPTY_STRING */ || Number(value) > 255;\n                }\n                return value === \"\" /* EMPTY_STRING */ || Number(value.substring(0, 3)) > 255;\n            }));\n    }\n    _splitPercentZero(value) {\n        const decimalIndex = typeof this.decimalMarker === 'string'\n            ? value.indexOf(this.decimalMarker)\n            : value.indexOf(\".\" /* DOT */);\n        if (decimalIndex === -1) {\n            const parsedValue = parseInt(value, 10);\n            return isNaN(parsedValue) ? \"\" /* EMPTY_STRING */ : parsedValue.toString();\n        }\n        else {\n            const integerPart = parseInt(value.substring(0, decimalIndex), 10);\n            const decimalPart = value.substring(decimalIndex + 1);\n            const integerString = isNaN(integerPart) ? '' : integerPart.toString();\n            const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* DOT */;\n            return integerString === \"\" /* EMPTY_STRING */\n                ? \"\" /* EMPTY_STRING */\n                : integerString + decimal + decimalPart;\n        }\n    }\n}\nNgxMaskApplierService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskApplierService, deps: [{ token: NGX_MASK_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\nNgxMaskApplierService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskApplierService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskApplierService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [NGX_MASK_CONFIG]\n                    }] }];\n    } });\n\nclass NgxMaskService extends NgxMaskApplierService {\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.isNumberValue = false;\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this._maskExpressionArray = [];\n        this.triggerOnMaskChange = false;\n        this._emitValue = false;\n        this._previousValue = '';\n        this._currentValue = '';\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n    }\n    // eslint-disable-next-line complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        var _a, _b;\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped\n            ? this.showMaskInInput()\n            : \"\" /* EMPTY_STRING */;\n        if (this.maskExpression === \"IP\" /* IP */ && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* HASH */);\n        }\n        if (this.maskExpression === \"CPF_CNPJ\" /* CPF_CNPJ */ && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* HASH */);\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown + this.suffix;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number'\n            ? (_a = inputValue[this.selStart]) !== null && _a !== void 0 ? _a : \"\" /* EMPTY_STRING */\n            : \"\" /* EMPTY_STRING */;\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined && !this.writingValue) {\n            let actualResult = inputValue && inputValue.length === 1\n                ? inputValue.split(\"\" /* EMPTY_STRING */)\n                : this.actualValue.split(\"\" /* EMPTY_STRING */);\n            // eslint-disable  @typescript-eslint/no-unused-expressions\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\n                this.selStart = Number(this.selStart);\n                this.selEnd = Number(this.selEnd);\n            }\n            else {\n                inputValue !== \"\" /* EMPTY_STRING */ && actualResult.length\n                    ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                        ? inputValue.length > actualResult.length\n                            ? actualResult.splice(this.selStart, 0, getSymbol)\n                            : inputValue.length < actualResult.length\n                                ? actualResult.length - inputValue.length === 1\n                                    ? backspaced\n                                        ? actualResult.splice(this.selStart - 1, 1)\n                                        : actualResult.splice(inputValue.length - 1, 1)\n                                    : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                                : null\n                        : null\n                    : (actualResult = []);\n            }\n            if (this.showMaskTyped) {\n                if (!this.hiddenInput) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = this.removeMask(inputValue);\n                }\n            }\n            // eslint-enable  @typescript-eslint/no-unused-expressions\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(\"\" /* EMPTY_STRING */))\n                    : inputValue;\n        }\n        if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\n            newInputValue = inputValue;\n        }\n        if (backspaced &&\n            this.specialCharacters.indexOf((_b = this.maskExpression[position]) !== null && _b !== void 0 ? _b : \"\" /* EMPTY_STRING */) !== -1 &&\n            this.showMaskTyped) {\n            newInputValue = this._currentValue;\n        }\n        if (this.deletedSpecialCharacter && position) {\n            if (this.specialCharacters.includes(this.actualValue.slice(position, position + 1))) {\n                // eslint-disable-next-line no-param-reassign\n                position = position + 1;\n            }\n            else if (maskExpression.slice(position - 1, position + 1) !== \"M0\" /* MONTHS */) {\n                // eslint-disable-next-line no-param-reassign\n                position = position - 2;\n            }\n            // eslint-disable-next-line no-param-reassign\n            this.deletedSpecialCharacter = false;\n        }\n        if (this.showMaskTyped &&\n            this.placeHolderCharacter.length === 1 &&\n            !this.leadZeroDateTime) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.removeMask(inputValue);\n        }\n        if (this.maskChanged) {\n            newInputValue = inputValue;\n        }\n        else {\n            newInputValue =\n                Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        }\n        if (this.showMaskTyped && this.keepCharacterPositions && this.actualValue && !justPasted) {\n            const value = this.dropSpecialCharacters\n                ? this.removeMask(this.actualValue)\n                : this.actualValue;\n            this.formControlResult(value);\n            return this.actualValue\n                ? this.actualValue\n                : this.prefix + this.maskIsShown + this.suffix;\n        }\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === \".\" /* DOT */ &&\n            this.decimalMarker === \".\" /* DOT */) {\n            this.decimalMarker = \",\" /* COMMA */;\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith(\"separator\" /* SEPARATOR */) &&\n            this.dropSpecialCharacters === true) {\n            this.specialCharacters = this.specialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n            );\n        }\n        if (result || result === '') {\n            this._previousValue = this._currentValue;\n            this._currentValue = result;\n            this._emitValue =\n                this._previousValue !== this._currentValue ||\n                    this.maskChanged ||\n                    (this._previousValue === this._currentValue && justPasted);\n        }\n        this._emitValue ? this.formControlResult(result) : '';\n        if (!this.showMaskTyped || (this.showMaskTyped && this.hiddenInput)) {\n            if (this.hiddenInput) {\n                if (backspaced) {\n                    return this.hideInput(result, this.maskExpression);\n                }\n                return (this.hideInput(result, this.maskExpression) +\n                    this.maskIsShown.slice(result.length));\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown + this.suffix;\n        if (this.maskExpression.includes(\"H\" /* HOURS */)) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === \"IP\" /* IP */ ||\n            this.maskExpression === \"CPF_CNPJ\" /* CPF_CNPJ */) {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        var _a;\n        const formElement = (_a = this._elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split(\"\" /* EMPTY_STRING */)\n            .map((curr, index) => {\n            var _a, _b, _c, _d, _e;\n            if (this.patterns &&\n                this.patterns[(_a = maskExpression[index]) !== null && _a !== void 0 ? _a : \"\" /* EMPTY_STRING */] &&\n                ((_c = this.patterns[(_b = maskExpression[index]) !== null && _b !== void 0 ? _b : \"\" /* EMPTY_STRING */]) === null || _c === void 0 ? void 0 : _c.symbol)) {\n                return (_e = this.patterns[(_d = maskExpression[index]) !== null && _d !== void 0 ? _d : \"\" /* EMPTY_STRING */]) === null || _e === void 0 ? void 0 : _e.symbol;\n            }\n            return curr;\n        })\n            .join(\"\" /* EMPTY_STRING */);\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res\n            .split(\"\" /* EMPTY_STRING */)\n            .filter((symbol, i) => {\n            var _a;\n            const maskChar = (_a = this.maskExpression[i]) !== null && _a !== void 0 ? _a : \"\" /* EMPTY_STRING */;\n            return (this._checkSymbolMask(symbol, maskChar) ||\n                (this.specialCharacters.includes(maskChar) && symbol === maskChar));\n        });\n        if (compare.join(\"\" /* EMPTY_STRING */) === res) {\n            return compare.join(\"\" /* EMPTY_STRING */);\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue\n                .split(\"\" /* EMPTY_STRING */)\n                .map((currSymbol, index) => {\n                var _a;\n                if (this.specialCharacters.includes((_a = inputValue[index + 1]) !== null && _a !== void 0 ? _a : \"\" /* EMPTY_STRING */) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = \"\" /* EMPTY_STRING */;\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join(\"\" /* EMPTY_STRING */);\n    }\n    /**\n     * Convert number value to string\n     * 3.1415 -> '3.1415'\n     * 1e-7 -> '0.0000001'\n     */\n    numberToString(value) {\n        if ((!value && value !== 0) ||\n            (this.maskExpression.startsWith(\"separator\" /* SEPARATOR */) &&\n                (this.leadZero || !this.dropSpecialCharacters)) ||\n            (this.maskExpression.startsWith(\"separator\" /* SEPARATOR */) &&\n                this.separatorLimit.length > 14 &&\n                String(value).length > 14)) {\n            return String(value);\n        }\n        return Number(value)\n            .toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        })\n            .replace(`/${\"-\" /* MINUS */}/`, \"-\" /* MINUS */);\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === \"IP\" /* IP */) {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === \"CPF_CNPJ\" /* CPF_CNPJ */) {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            if (this.placeHolderCharacter.length === this.maskExpression.length) {\n                return this.placeHolderCharacter;\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        var _a;\n        const formElement = (_a = this._elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(this.placeHolderCharacter, \"\" /* EMPTY_STRING */)\n                    .length) {\n            this.formElementProperty = ['value', \"\" /* EMPTY_STRING */];\n            this.applyMask('', this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        if (!this._renderer || !this._elementRef) {\n            return;\n        }\n        Promise.resolve().then(() => { var _a, _b; return (_a = this._renderer) === null || _a === void 0 ? void 0 : _a.setProperty((_b = this._elementRef) === null || _b === void 0 ? void 0 : _b.nativeElement, name, value); });\n    }\n    checkDropSpecialCharAmount(mask) {\n        const chars = mask\n            .split(\"\" /* EMPTY_STRING */)\n            .filter((item) => this._findDropSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        var _a;\n        if (inputVal === \"#\" /* HASH */) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = (_a = inputVal[i]) !== null && _a !== void 0 ? _a : \"\" /* EMPTY_STRING */;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        var _a;\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === \"#\" /* HASH */) {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = (_a = inputVal[i]) !== null && _a !== void 0 ? _a : \"\" /* EMPTY_STRING */;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n     */\n    _getActiveElement(document = this.document) {\n        var _a;\n        const shadowRootEl = (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n        if (!(shadowRootEl === null || shadowRootEl === void 0 ? void 0 : shadowRootEl.activeElement)) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.maskChanged\n                ? this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))))\n                : '';\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)))));\n        }\n        else if (this.dropSpecialCharacters ||\n            (!this.dropSpecialCharacters && this.prefix === inputValue)) {\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))));\n        }\n        else {\n            this.onChange(this.outputTransformFn(this._toNumber(inputValue)));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === \"\" /* EMPTY_STRING */) {\n            return value;\n        }\n        if (this.maskExpression.startsWith(\"separator\" /* SEPARATOR */) &&\n            (this.leadZero || !this.dropSpecialCharacters)) {\n            return value;\n        }\n        if (String(value).length > 16 && this.separatorLimit.length > 14) {\n            return String(value);\n        }\n        const num = Number(value);\n        if (this.maskExpression.startsWith(\"separator\" /* SEPARATOR */) && Number.isNaN(num)) {\n            const val = String(value).replace(',', '.');\n            return Number(val);\n        }\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        if (this.maskExpression.startsWith(\"percent\" /* PERCENT */) &&\n            value.includes(\".\" /* DOT */)) {\n            return value;\n        }\n        return value\n            ? value.replace(this._regExpForRemove(specialCharactersForRemove), \"\" /* EMPTY_STRING */)\n            : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, \"\" /* EMPTY_STRING */) : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, \"\" /* EMPTY_STRING */) : value;\n    }\n    _retrieveSeparatorValue(result) {\n        let specialCharacters = Array.isArray(this.dropSpecialCharacters)\n            ? this.specialCharacters.filter((v) => {\n                return this.dropSpecialCharacters.includes(v);\n            })\n            : this.specialCharacters;\n        if (!this.deletedSpecialCharacter &&\n            this._checkPatternForSpace() &&\n            result.includes(\" \" /* WHITE_SPACE */) &&\n            this.maskExpression.includes(\"*\" /* SYMBOL_STAR */)) {\n            specialCharacters = specialCharacters.filter((char) => char !== \" \" /* WHITE_SPACE */);\n        }\n        return this._removeMask(result, specialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _replaceDecimalMarkerToDot(value) {\n        const markers = Array.isArray(this.decimalMarker)\n            ? this.decimalMarker\n            : [this.decimalMarker];\n        return value.replace(this._regExpForRemove(markers), \".\" /* DOT */);\n    }\n    _checkSymbols(result) {\n        if (result === \"\" /* EMPTY_STRING */) {\n            return result;\n        }\n        if (this.maskExpression.startsWith(\"percent\" /* PERCENT */) &&\n            this.decimalMarker === \",\" /* COMMA */) {\n            // eslint-disable-next-line no-param-reassign\n            result = result.replace(\",\" /* COMMA */, \".\" /* DOT */);\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            if (this.separatorLimit.length > 14) {\n                return String(separatorValue);\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return separatorValue;\n        }\n    }\n    _checkPatternForSpace() {\n        var _a, _b, _c;\n        for (const key in this.patterns) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.patterns[key] && ((_a = this.patterns[key]) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('pattern'))) {\n                const patternString = (_b = this.patterns[key]) === null || _b === void 0 ? void 0 : _b.pattern.toString();\n                const pattern = (_c = this.patterns[key]) === null || _c === void 0 ? void 0 : _c.pattern;\n                if ((patternString === null || patternString === void 0 ? void 0 : patternString.includes(\" \" /* WHITE_SPACE */)) &&\n                    (pattern === null || pattern === void 0 ? void 0 : pattern.test(this.maskExpression))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        const separatorPrecision = separatorExpression.slice(10, 11);\n        if (separatorExpression.indexOf('2') > 0 ||\n            (this.leadZero && Number(separatorPrecision) > 1)) {\n            if (this.decimalMarker === \",\" /* COMMA */ && this.leadZero) {\n                // eslint-disable-next-line no-param-reassign\n                separatorValue = separatorValue.replace(',', '.');\n            }\n            return this.leadZero\n                ? Number(separatorValue).toFixed(Number(separatorPrecision))\n                : Number(separatorValue).toFixed(2);\n        }\n        return this.numberToString(separatorValue);\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp\n                .split(\"\" /* EMPTY_STRING */)\n                .reduce((accum, currVal, index) => {\n                this._start =\n                    currVal === \"{\" /* CURLY_BRACKETS_LEFT */ ? index : this._start;\n                if (currVal !== \"}\" /* CURLY_BRACKETS_RIGHT */) {\n                    return this._findSpecialChar(currVal) ? accum + currVal : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                if (maskExp.slice(0, this._start).length > 1 &&\n                    maskExp.includes(\"S\" /* LETTER_S */)) {\n                    const symbols = maskExp.slice(0, this._start - 1);\n                    return symbols.includes(\"{\" /* CURLY_BRACKETS_LEFT */)\n                        ? accum + replaceWith\n                        : symbols + accum + replaceWith;\n                }\n                else {\n                    return accum + replaceWith;\n                }\n            }, '')) ||\n            maskExp);\n    }\n    currentLocaleDecimalMarker() {\n        return (1.1).toLocaleString().substring(1, 2);\n    }\n}\nNgxMaskService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskService, deps: [{ token: DOCUMENT }, { token: NGX_MASK_CONFIG }, { token: i0.ElementRef, optional: true }, { token: i0.Renderer2, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nNgxMaskService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [NGX_MASK_CONFIG]\n                    }] }, { type: i0.ElementRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.Renderer2, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n// tslint:disable deprecation\n// tslint:disable no-input-rename\nclass NgxMaskDirective {\n    constructor(\n    // tslint:disable-next-line\n    document, _config, _maskService) {\n        this.document = document;\n        this._config = _config;\n        this._maskService = _maskService;\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this.leadZero = null;\n        this.triggerOnMaskChange = null;\n        this.apm = null;\n        this.inputTransformFn = null;\n        this.outputTransformFn = null;\n        this.keepCharacterPositions = null;\n        this.maskFilled = new EventEmitter();\n        this._maskValue = '';\n        this._isFocused = false;\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        /**For IME composition event */\n        this._isComposing = false;\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, leadZero, triggerOnMaskChange, apm, inputTransformFn, outputTransformFn, keepCharacterPositions, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\n                !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (maskExpression.currentValue &&\n                maskExpression.currentValue.split(\"||\" /* OR */).length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue\n                    .split(\"||\" /* OR */)\n                    .sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray = [];\n                this._maskValue = maskExpression.currentValue || \"\" /* EMPTY_STRING */;\n                this._maskService.maskExpression = this._maskValue;\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.specialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.specialCharacters = this._maskService.specialCharacters.filter((c) => c !== \"-\" /* MINUS */);\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.patterns = patterns.currentValue;\n        }\n        if (apm && apm.currentValue) {\n            this._maskService.apm = apm.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n            if (showMaskTyped.previousValue === false &&\n                showMaskTyped.currentValue === true &&\n                this._isFocused) {\n                requestAnimationFrame(() => {\n                    var _a;\n                    (_a = this._maskService._elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement.click();\n                });\n            }\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (leadZero) {\n            this._maskService.leadZero = leadZero.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        if (inputTransformFn) {\n            this._maskService.inputTransformFn = inputTransformFn.currentValue;\n        }\n        if (outputTransformFn) {\n            this._maskService.outputTransformFn = outputTransformFn.currentValue;\n        }\n        if (keepCharacterPositions) {\n            this._maskService.keepCharacterPositions = keepCharacterPositions.currentValue;\n        }\n        this._applyMask();\n    }\n    // eslint-disable-next-line complexity\n    validate({ value }) {\n        var _a, _b, _c;\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith(\"separator\" /* SEPARATOR */)) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            if (this._maskValue.startsWith(\"percent\" /* PERCENT */)) {\n                return null;\n            }\n            for (const key in this._maskService.patterns) {\n                if ((_a = this._maskService.patterns[key]) === null || _a === void 0 ? void 0 : _a.optional) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split(\"\" /* EMPTY_STRING */)\n                            .filter((i) => i === key)\n                            .join(\"\" /* EMPTY_STRING */);\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf(\"{\" /* CURLY_BRACKETS_LEFT */) === 1 &&\n                value.toString().length ===\n                    this._maskValue.length +\n                        Number(((_b = this._maskValue.split(\"{\" /* CURLY_BRACKETS_LEFT */)[1]) !== null && _b !== void 0 ? _b : \"\" /* EMPTY_STRING */).split(\"}\" /* CURLY_BRACKETS_RIGHT */)[0]) -\n                        4) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf(\"*\" /* SYMBOL_STAR */) > 1 &&\n                value.toString().length <\n                    this._maskValue.indexOf(\"*\" /* SYMBOL_STAR */)) ||\n                (this._maskValue.indexOf(\"?\" /* SYMBOL_QUESTION */) > 1 &&\n                    value.toString().length <\n                        this._maskValue.indexOf(\"?\" /* SYMBOL_QUESTION */)) ||\n                this._maskValue.indexOf(\"{\" /* CURLY_BRACKETS_LEFT */) === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf(\"*\" /* SYMBOL_STAR */) === -1 ||\n                this._maskValue.indexOf(\"?\" /* SYMBOL_QUESTION */) === -1) {\n                // eslint-disable-next-line no-param-reassign\n                value = typeof value === 'number' ? String(value) : value;\n                const array = this._maskValue.split('*');\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length -\n                        this._maskService.checkDropSpecialCharAmount(this._maskValue) -\n                        counterOfOpt\n                    : this.prefix\n                        ? this._maskValue.length + this.prefix.length - counterOfOpt\n                        : this._maskValue.length - counterOfOpt;\n                if (array.length === 1) {\n                    if (value.toString().length < length) {\n                        return this._createValidationError(value);\n                    }\n                }\n                if (array.length > 1) {\n                    const lastIndexArray = array[array.length - 1];\n                    if (lastIndexArray &&\n                        this._maskService.specialCharacters.includes(lastIndexArray[0]) &&\n                        String(value).includes((_c = lastIndexArray[0]) !== null && _c !== void 0 ? _c : '') &&\n                        !this.dropSpecialCharacters) {\n                        const special = value.split(lastIndexArray[0]);\n                        return special[special.length - 1].length === lastIndexArray.length - 1\n                            ? null\n                            : this._createValidationError(value);\n                    }\n                    else if (((lastIndexArray &&\n                        !this._maskService.specialCharacters.includes(lastIndexArray[0])) ||\n                        !lastIndexArray ||\n                        this._maskService.dropSpecialCharacters) &&\n                        value.length >= length - 1) {\n                        return null;\n                    }\n                    else {\n                        return this._createValidationError(value);\n                    }\n                }\n            }\n            if (this._maskValue.indexOf(\"*\" /* SYMBOL_STAR */) === 1 ||\n                this._maskValue.indexOf(\"?\" /* SYMBOL_QUESTION */) === 1) {\n                return null;\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onFocus() {\n        this._isFocused = true;\n    }\n    onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if ((value === \"\" /* EMPTY_STRING */ || value === null || value === undefined) &&\n            this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue(\"\" /* EMPTY_STRING */);\n        }\n    }\n    onInput(e) {\n        var _a, _b, _c, _d, _e;\n        // If IME is composing text, we wait for the composed text.\n        if (this._isComposing)\n            return;\n        const el = e.target;\n        const transformedValue = this._maskService.inputTransformFn(el.value);\n        if (el.type !== 'number') {\n            if (typeof transformedValue === 'string' || typeof transformedValue === 'number') {\n                el.value = transformedValue.toString();\n                this._inputValue = el.value;\n                this._setMask();\n                if (!this._maskValue) {\n                    this.onChange(el.value);\n                    return;\n                }\n                let position = el.selectionStart === 1\n                    ? el.selectionStart + this._maskService.prefix.length\n                    : el.selectionStart;\n                if (this.showMaskTyped &&\n                    this.keepCharacterPositions &&\n                    this._maskService.placeHolderCharacter.length === 1) {\n                    const inputSymbol = el.value.slice(position - 1, position);\n                    const prefixLength = this.prefix.length;\n                    const checkSymbols = this._maskService._checkSymbolMask(inputSymbol, (_a = this._maskService.maskExpression[position - 1 - prefixLength]) !== null && _a !== void 0 ? _a : \"\" /* EMPTY_STRING */);\n                    const checkSpecialCharacter = this._maskService._checkSymbolMask(inputSymbol, (_b = this._maskService.maskExpression[position + 1 - prefixLength]) !== null && _b !== void 0 ? _b : \"\" /* EMPTY_STRING */);\n                    const selectRangeBackspace = this._maskService.selStart === this._maskService.selEnd;\n                    const selStart = (_c = Number(this._maskService.selStart) - prefixLength) !== null && _c !== void 0 ? _c : '';\n                    const selEnd = (_d = Number(this._maskService.selEnd) - prefixLength) !== null && _d !== void 0 ? _d : '';\n                    if (this._code === \"Backspace\" /* BACKSPACE */) {\n                        if (!selectRangeBackspace) {\n                            if (this._maskService.selStart === prefixLength) {\n                                this._maskService.actualValue =\n                                    this.prefix +\n                                        this._maskService.maskIsShown.slice(0, selEnd) +\n                                        this._inputValue.split(this.prefix).join('');\n                            }\n                            else if (this._maskService.selStart ===\n                                this._maskService.maskIsShown.length + prefixLength) {\n                                this._maskService.actualValue =\n                                    this._inputValue +\n                                        this._maskService.maskIsShown.slice(selStart, selEnd);\n                            }\n                            else {\n                                this._maskService.actualValue =\n                                    this.prefix +\n                                        this._inputValue\n                                            .split(this.prefix)\n                                            .join('')\n                                            .slice(0, selStart) +\n                                        this._maskService.maskIsShown.slice(selStart, selEnd) +\n                                        this._maskService.actualValue.slice(selEnd + prefixLength, this._maskService.maskIsShown.length + prefixLength) +\n                                        this.suffix;\n                            }\n                        }\n                        else if (!this._maskService.specialCharacters.includes(this._maskService.maskExpression.slice(position - this.prefix.length, position + 1 - this.prefix.length)) &&\n                            selectRangeBackspace) {\n                            if (selStart === 1 && this.prefix) {\n                                this._maskService.actualValue =\n                                    this.prefix +\n                                        this._maskService.placeHolderCharacter +\n                                        el.value\n                                            .split(this.prefix)\n                                            .join('')\n                                            .split(this.suffix)\n                                            .join('') +\n                                        this.suffix;\n                                position = position - 1;\n                            }\n                            else {\n                                const part1 = el.value.substring(0, position);\n                                const part2 = el.value.substring(position);\n                                this._maskService.actualValue =\n                                    part1 + this._maskService.placeHolderCharacter + part2;\n                            }\n                        }\n                    }\n                    if (this._code !== \"Backspace\" /* BACKSPACE */) {\n                        if (!checkSymbols && !checkSpecialCharacter && selectRangeBackspace) {\n                            position = Number(el.selectionStart) - 1;\n                        }\n                        else if (this._maskService.specialCharacters.includes(el.value.slice(position, position + 1)) &&\n                            checkSpecialCharacter &&\n                            !this._maskService.specialCharacters.includes(el.value.slice(position + 1, position + 2))) {\n                            this._maskService.actualValue =\n                                el.value.slice(0, position - 1) +\n                                    el.value.slice(position, position + 1) +\n                                    inputSymbol +\n                                    el.value.slice(position + 2);\n                            position = position + 1;\n                        }\n                        else if (checkSymbols) {\n                            if (el.value.length === 1 && position === 1) {\n                                this._maskService.actualValue =\n                                    this.prefix +\n                                        inputSymbol +\n                                        this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length) +\n                                        this.suffix;\n                            }\n                            else {\n                                this._maskService.actualValue =\n                                    el.value.slice(0, position - 1) +\n                                        inputSymbol +\n                                        el.value\n                                            .slice(position + 1)\n                                            .split(this.suffix)\n                                            .join('') +\n                                        this.suffix;\n                            }\n                        }\n                        else if (this.prefix &&\n                            el.value.length === 1 &&\n                            position - prefixLength === 1 &&\n                            this._maskService._checkSymbolMask(el.value, (_e = this._maskService.maskExpression[position - 1 - prefixLength]) !== null && _e !== void 0 ? _e : \"\" /* EMPTY_STRING */)) {\n                            this._maskService.actualValue =\n                                this.prefix +\n                                    el.value +\n                                    this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length) +\n                                    this.suffix;\n                        }\n                    }\n                }\n                let caretShift = 0;\n                let backspaceShift = false;\n                if (this._code === \"Delete\" /* DELETE */ && \"separator\" /* SEPARATOR */) {\n                    this._maskService.deletedSpecialCharacter = true;\n                }\n                if (this._inputValue.length >= this._maskService.maskExpression.length - 1 &&\n                    this._code !== \"Backspace\" /* BACKSPACE */ &&\n                    this._maskService.maskExpression === \"d0/M0/0000\" /* DAYS_MONTHS_YEARS */ &&\n                    position < 10) {\n                    const inputSymbol = this._inputValue.slice(position - 1, position);\n                    el.value =\n                        this._inputValue.slice(0, position - 1) +\n                            inputSymbol +\n                            this._inputValue.slice(position + 1);\n                }\n                if (this._maskService.maskExpression === \"d0/M0/0000\" /* DAYS_MONTHS_YEARS */ &&\n                    this.leadZeroDateTime) {\n                    if ((position < 3 && Number(el.value) > 31 && Number(el.value) < 40) ||\n                        (position === 5 && Number(el.value.slice(3, 5)) > 12)) {\n                        position = position + 2;\n                    }\n                }\n                if (this._maskService.maskExpression === \"Hh:m0:s0\" /* HOURS_MINUTES_SECONDS */ &&\n                    this.apm) {\n                    if (this._justPasted && el.value.slice(0, 2) === \"00\" /* DOUBLE_ZERO */) {\n                        el.value = el.value.slice(1, 2) + el.value.slice(2, el.value.length);\n                    }\n                    el.value =\n                        el.value === \"00\" /* DOUBLE_ZERO */\n                            ? \"0\" /* NUMBER_ZERO */\n                            : el.value;\n                }\n                this._maskService.applyValueChanges(position, this._justPasted, this._code === \"Backspace\" /* BACKSPACE */ || this._code === \"Delete\" /* DELETE */, (shift, _backspaceShift) => {\n                    this._justPasted = false;\n                    caretShift = shift;\n                    backspaceShift = _backspaceShift;\n                });\n                // only set the selection if the element is active\n                if (this._getActiveElement() !== el) {\n                    return;\n                }\n                if (this._maskService.plusOnePosition) {\n                    position = position + 1;\n                    this._maskService.plusOnePosition = false;\n                }\n                // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n                if (this._maskExpressionArray.length) {\n                    if (this._code === \"Backspace\" /* BACKSPACE */) {\n                        position = this.specialCharacters.includes(this._inputValue.slice(position - 1, position))\n                            ? position - 1\n                            : position;\n                    }\n                    else {\n                        position =\n                            el.selectionStart === 1\n                                ? el.selectionStart + this._maskService.prefix.length\n                                : el.selectionStart;\n                    }\n                }\n                this._position =\n                    this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n                let positionToApply = this._position\n                    ? this._inputValue.length + position + caretShift\n                    : position +\n                        (this._code === \"Backspace\" /* BACKSPACE */ && !backspaceShift ? 0 : caretShift);\n                if (positionToApply > this._getActualInputLength()) {\n                    positionToApply =\n                        el.value === this._maskService.decimalMarker && el.value.length === 1\n                            ? this._getActualInputLength() + 1\n                            : this._getActualInputLength();\n                }\n                if (positionToApply < 0) {\n                    positionToApply = 0;\n                }\n                el.setSelectionRange(positionToApply, positionToApply);\n                this._position = null;\n            }\n            else {\n                console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof transformedValue);\n            }\n        }\n        else {\n            if (!this._maskValue) {\n                this.onChange(el.value);\n                return;\n            }\n            this._maskService.applyValueChanges(el.value.length, this._justPasted, this._code === \"Backspace\" /* BACKSPACE */ || this._code === \"Delete\" /* DELETE */);\n        }\n    }\n    // IME starts\n    onCompositionStart() {\n        this._isComposing = true;\n    }\n    // IME completes\n    onCompositionEnd(e) {\n        this._isComposing = false;\n        this._justPasted = true;\n        this.onInput(e);\n    }\n    onBlur(e) {\n        if (this._maskValue) {\n            const el = e.target;\n            if (this.leadZero && el.value.length > 0 && typeof this.decimalMarker === 'string') {\n                const maskExpression = this._maskService.maskExpression;\n                const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\n                if (precision > 1) {\n                    el.value = this.suffix ? el.value.split(this.suffix).join('') : el.value;\n                    const decimalPart = el.value.split(this.decimalMarker)[1];\n                    el.value = el.value.includes(this.decimalMarker)\n                        ? el.value +\n                            \"0\" /* NUMBER_ZERO */.repeat(precision - decimalPart.length) +\n                            this.suffix\n                        : el.value +\n                            this.decimalMarker +\n                            \"0\" /* NUMBER_ZERO */.repeat(precision) +\n                            this.suffix;\n                    this._maskService.actualValue = el.value;\n                }\n            }\n            this._maskService.clearIfNotMatchFn();\n        }\n        this._isFocused = false;\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // eslint-disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped && !this.keepCharacterPositions) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = el &&\n            (el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value);\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el && el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if (el &&\n            el.type !== 'number' &&\n            (el.selectionStart || el.selectionEnd) <=\n                this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el && el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // eslint-disable-next-line complexity\n    onKeyDown(e) {\n        var _a, _b;\n        if (!this._maskValue) {\n            return;\n        }\n        if (this._isComposing) {\n            // User finalize their choice from IME composition, so trigger onInput() for the composed text.\n            if (e.key === 'Enter')\n                this.onCompositionEnd(e);\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (el.type !== 'number') {\n            if (e.key === \"ArrowUp\" /* ARROW_UP */) {\n                e.preventDefault();\n            }\n            if (e.key === \"ArrowLeft\" /* ARROW_LEFT */ ||\n                e.key === \"Backspace\" /* BACKSPACE */ ||\n                e.key === \"Delete\" /* DELETE */) {\n                if (e.key === \"Backspace\" /* BACKSPACE */ && el.value.length === 0) {\n                    el.selectionStart = el.selectionEnd;\n                }\n                if (e.key === \"Backspace\" /* BACKSPACE */ && el.selectionStart !== 0) {\n                    // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                    this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length)\n                        ? this.specialCharacters\n                        : this._config.specialCharacters;\n                    if (this.prefix.length > 1 &&\n                        el.selectionStart <= this.prefix.length) {\n                        el.setSelectionRange(this.prefix.length, el.selectionEnd);\n                    }\n                    else {\n                        if (this._inputValue.length !== el.selectionStart &&\n                            el.selectionStart !== 1) {\n                            while (this.specialCharacters.includes(((_b = this._inputValue[el.selectionStart - 1]) !== null && _b !== void 0 ? _b : \"\" /* EMPTY_STRING */).toString()) &&\n                                ((this.prefix.length >= 1 &&\n                                    el.selectionStart > this.prefix.length) ||\n                                    this.prefix.length === 0)) {\n                                el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                            }\n                        }\n                    }\n                }\n                this.checkSelectionOnDeletion(el);\n                if (this._maskService.prefix.length &&\n                    el.selectionStart <= this._maskService.prefix.length &&\n                    el.selectionEnd <= this._maskService.prefix.length) {\n                    e.preventDefault();\n                }\n                const cursorStart = el.selectionStart;\n                if (e.key === \"Backspace\" /* BACKSPACE */ &&\n                    !el.readOnly &&\n                    cursorStart === 0 &&\n                    el.selectionEnd === el.value.length &&\n                    el.value.length !== 0) {\n                    this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                    this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n                }\n            }\n            if (!!this.suffix &&\n                this.suffix.length > 1 &&\n                this._inputValue.length - this.suffix.length < el.selectionStart) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n            else if ((e.code === 'KeyA' && e.ctrlKey) ||\n                (e.code === 'KeyA' && e.metaKey) // Cmd + A (Mac)\n            ) {\n                el.setSelectionRange(0, this._getActualInputLength());\n                e.preventDefault();\n            }\n            this._maskService.selStart = el.selectionStart;\n            this._maskService.selEnd = el.selectionEnd;\n        }\n    }\n    /** It writes the value in the input */\n    writeValue(controlValue) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof controlValue === 'object' && controlValue !== null && 'value' in controlValue) {\n                if ('disable' in controlValue) {\n                    this.setDisabledState(Boolean(controlValue.disable));\n                }\n                // eslint-disable-next-line no-param-reassign\n                controlValue = controlValue.value;\n            }\n            if (controlValue !== null) {\n                // eslint-disable-next-line no-param-reassign\n                controlValue = this.inputTransformFn\n                    ? this.inputTransformFn(controlValue)\n                    : controlValue;\n            }\n            if (typeof controlValue === 'string' ||\n                typeof controlValue === 'number' ||\n                controlValue === null ||\n                controlValue === undefined) {\n                if (controlValue === null || controlValue === undefined || controlValue === '') {\n                    this._maskService._currentValue = '';\n                    this._maskService._previousValue = '';\n                }\n                // eslint-disable-next-line no-param-reassign\n                let inputValue = controlValue;\n                if (typeof inputValue === 'number' ||\n                    this._maskValue.startsWith(\"separator\" /* SEPARATOR */)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = String(inputValue);\n                    const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n                    if (!Array.isArray(this._maskService.decimalMarker)) {\n                        // eslint-disable-next-line no-param-reassign\n                        inputValue =\n                            this._maskService.decimalMarker !== localeDecimalMarker\n                                ? inputValue.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                                : inputValue;\n                    }\n                    if (this._maskService.leadZero &&\n                        inputValue &&\n                        this.maskExpression &&\n                        this.dropSpecialCharacters !== false) {\n                        // eslint-disable-next-line no-param-reassign\n                        inputValue = this._maskService._checkPrecision(this._maskService.maskExpression, inputValue);\n                    }\n                    if (this._maskService.decimalMarker === \",\" /* COMMA */) {\n                        // eslint-disable-next-line no-param-reassign\n                        inputValue = inputValue\n                            .toString()\n                            .replace(\".\" /* DOT */, \",\" /* COMMA */);\n                    }\n                    if (((_a = this.maskExpression) === null || _a === void 0 ? void 0 : _a.startsWith(\"separator\" /* SEPARATOR */)) && this.leadZero) {\n                        requestAnimationFrame(() => {\n                            var _a;\n                            this._maskService.applyMask((_a = inputValue === null || inputValue === void 0 ? void 0 : inputValue.toString()) !== null && _a !== void 0 ? _a : '', this._maskService.maskExpression);\n                        });\n                    }\n                    this._maskService.isNumberValue = true;\n                }\n                if (typeof inputValue !== 'string') {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = '';\n                }\n                this._inputValue = inputValue;\n                this._setMask();\n                if ((inputValue && this._maskService.maskExpression) ||\n                    (this._maskService.maskExpression &&\n                        (this._maskService.prefix || this._maskService.showMaskTyped))) {\n                    // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n                    typeof this.inputTransformFn !== 'function'\n                        ? (this._maskService.writingValue = true)\n                        : '';\n                    this._maskService.formElementProperty = [\n                        'value',\n                        this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                    ];\n                    // Let the service know we've finished writing value\n                    typeof this.inputTransformFn !== 'function'\n                        ? (this._maskService.writingValue = false)\n                        : '';\n                }\n                else {\n                    this._maskService.formElementProperty = ['value', inputValue];\n                }\n                this._inputValue = inputValue;\n            }\n            else {\n                console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof controlValue);\n            }\n        });\n    }\n    registerOnChange(fn) {\n        this._maskService.onChange = this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        var _a;\n        const shadowRootEl = (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot;\n        if (!(shadowRootEl === null || shadowRootEl === void 0 ? void 0 : shadowRootEl.activeElement)) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _applyMask() {\n        this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        var _a;\n        const rowMaskLen = this._maskValue\n            .split(\"\" /* EMPTY_STRING */)\n            .filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+((_a = value[value.length - 1]) !== null && _a !== void 0 ? _a : -1) === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        this._maskExpressionArray.some((mask) => {\n            var _a, _b, _c, _d;\n            const specialChart = mask\n                .split(\"\" /* EMPTY_STRING */)\n                .some((char) => this._maskService.specialCharacters.includes(char));\n            if ((specialChart && this._inputValue && !mask.includes(\"S\" /* LETTER_S */)) ||\n                mask.includes(\"{\" /* CURLY_BRACKETS_LEFT */)) {\n                const test = ((_a = this._maskService.removeMask(this._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <=\n                    ((_b = this._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n                if (test) {\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                mask.includes(\"{\" /* CURLY_BRACKETS_LEFT */)\n                                    ? this._maskService._repeatPatternSymbols(mask)\n                                    : mask;\n                    return test;\n                }\n                else {\n                    const expression = (_c = this._maskExpressionArray[this._maskExpressionArray.length - 1]) !== null && _c !== void 0 ? _c : \"\" /* EMPTY_STRING */;\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                expression.includes(\"{\" /* CURLY_BRACKETS_LEFT */)\n                                    ? this._maskService._repeatPatternSymbols(expression)\n                                    : expression;\n                }\n            }\n            else {\n                const check = (_d = this._maskService\n                    .removeMask(this._inputValue)) === null || _d === void 0 ? void 0 : _d.split(\"\" /* EMPTY_STRING */).every((character, index) => {\n                    const indexMask = mask.charAt(index);\n                    return this._maskService._checkSymbolMask(character, indexMask);\n                });\n                if (check) {\n                    this._maskValue = this.maskExpression = this._maskService.maskExpression = mask;\n                    return check;\n                }\n            }\n        });\n    }\n}\nNgxMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskDirective, deps: [{ token: DOCUMENT }, { token: NGX_MASK_CONFIG }, { token: NgxMaskService }], target: i0.ɵɵFactoryTarget.Directive });\nNgxMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.12\", type: NgxMaskDirective, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", leadZero: \"leadZero\", triggerOnMaskChange: \"triggerOnMaskChange\", apm: \"apm\", inputTransformFn: \"inputTransformFn\", outputTransformFn: \"outputTransformFn\", keepCharacterPositions: \"keepCharacterPositions\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"focus\": \"onFocus($event)\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"compositionstart\": \"onCompositionStart($event)\", \"compositionend\": \"onCompositionEnd($event)\", \"blur\": \"onBlur($event)\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxMaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => NgxMaskDirective),\n            multi: true,\n        },\n        NgxMaskService,\n    ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => NgxMaskDirective),\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: forwardRef(() => NgxMaskDirective),\n                            multi: true,\n                        },\n                        NgxMaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [NGX_MASK_CONFIG]\n                    }] }, { type: NgxMaskService }];\n    }, propDecorators: { maskExpression: [{\n                type: Input,\n                args: ['mask']\n            }], specialCharacters: [{\n                type: Input\n            }], patterns: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], thousandSeparator: [{\n                type: Input\n            }], decimalMarker: [{\n                type: Input\n            }], dropSpecialCharacters: [{\n                type: Input\n            }], hiddenInput: [{\n                type: Input\n            }], showMaskTyped: [{\n                type: Input\n            }], placeHolderCharacter: [{\n                type: Input\n            }], shownMaskExpression: [{\n                type: Input\n            }], showTemplate: [{\n                type: Input\n            }], clearIfNotMatch: [{\n                type: Input\n            }], validation: [{\n                type: Input\n            }], separatorLimit: [{\n                type: Input\n            }], allowNegativeNumbers: [{\n                type: Input\n            }], leadZeroDateTime: [{\n                type: Input\n            }], leadZero: [{\n                type: Input\n            }], triggerOnMaskChange: [{\n                type: Input\n            }], apm: [{\n                type: Input\n            }], inputTransformFn: [{\n                type: Input\n            }], outputTransformFn: [{\n                type: Input\n            }], keepCharacterPositions: [{\n                type: Input\n            }], maskFilled: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focus', ['$event']]\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onCompositionStart: [{\n                type: HostListener,\n                args: ['compositionstart', ['$event']]\n            }], onCompositionEnd: [{\n                type: HostListener,\n                args: ['compositionend', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur', ['$event']]\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass NgxMaskPipe {\n    constructor(_maskService) {\n        this._maskService = _maskService;\n        this.defaultOptions = {};\n        this._maskExpressionArray = [];\n        this.mask = '';\n    }\n    transform(value, mask, _a = {}) {\n        var { patterns } = _a, config = __rest(_a, [\"patterns\"]);\n        const currentConfig = Object.assign(Object.assign(Object.assign({ maskExpression: mask }, this.defaultOptions), config), { patterns: Object.assign(Object.assign({}, this._maskService.patterns), patterns) });\n        Object.entries(currentConfig).forEach(([key, value]) => {\n            //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n            this._maskService[key] = value;\n        });\n        if (mask.includes('||')) {\n            if (mask.split('||').length > 1) {\n                this._maskExpressionArray = mask.split('||').sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask(value);\n                return this._maskService.applyMask(`${value}`, this.mask);\n            }\n            else {\n                this._maskExpressionArray = [];\n                return this._maskService.applyMask(`${value}`, this.mask);\n            }\n        }\n        if (mask.includes(\"{\" /* CURLY_BRACKETS_LEFT */)) {\n            return this._maskService.applyMask(`${value}`, this._maskService._repeatPatternSymbols(mask));\n        }\n        if (mask.startsWith(\"separator\" /* SEPARATOR */)) {\n            if (config.decimalMarker) {\n                this._maskService.decimalMarker = config.decimalMarker;\n            }\n            if (config.thousandSeparator) {\n                this._maskService.thousandSeparator = config.thousandSeparator;\n            }\n            if (config.leadZero) {\n                // eslint-disable-next-line no-param-reassign\n                this._maskService.leadZero = config.leadZero;\n            }\n            // eslint-disable-next-line no-param-reassign\n            value = String(value);\n            const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n            if (!Array.isArray(this._maskService.decimalMarker)) {\n                // eslint-disable-next-line no-param-reassign\n                value =\n                    this._maskService.decimalMarker !== localeDecimalMarker\n                        ? value.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                        : value;\n            }\n            if (this._maskService.leadZero &&\n                value &&\n                this._maskService.dropSpecialCharacters !== false) {\n                // eslint-disable-next-line no-param-reassign\n                value = this._maskService._checkPrecision(mask, value);\n            }\n            if (this._maskService.decimalMarker === \",\" /* COMMA */) {\n                // eslint-disable-next-line no-param-reassign\n                value = value.toString().replace(\".\" /* DOT */, \",\" /* COMMA */);\n            }\n            this._maskService.isNumberValue = true;\n        }\n        if (value === null || value === undefined) {\n            return this._maskService.applyMask('', mask);\n        }\n        return this._maskService.applyMask(`${value}`, mask);\n    }\n    _setMask(value) {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                var _a, _b, _c;\n                const test = ((_a = this._maskService.removeMask(value)) === null || _a === void 0 ? void 0 : _a.length) <=\n                    ((_b = this._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n                if (value && test) {\n                    this.mask = mask;\n                    return test;\n                }\n                else {\n                    const expression = (_c = this._maskExpressionArray[this._maskExpressionArray.length - 1]) !== null && _c !== void 0 ? _c : \"\" /* EMPTY_STRING */;\n                    this.mask = expression;\n                }\n            });\n        }\n    }\n}\nNgxMaskPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskPipe, deps: [{ token: NgxMaskService }], target: i0.ɵɵFactoryTarget.Pipe });\nNgxMaskPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskPipe, name: \"mask\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                }]\n        }], ctorParameters: function () { return [{ type: NgxMaskService }]; } });\n\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function\n        ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\nclass NgxMaskModule {\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: NGX_MASK_CONFIG,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                NgxMaskService,\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskModule, declarations: [NgxMaskDirective, NgxMaskPipe], exports: [NgxMaskDirective, NgxMaskPipe] });\nNgxMaskModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgxMaskModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [NgxMaskDirective, NgxMaskPipe],\n                    declarations: [NgxMaskDirective, NgxMaskPipe],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskModule, NgxMaskPipe, NgxMaskService, _configFactory, initialConfig, timeMasks, withoutValidation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}